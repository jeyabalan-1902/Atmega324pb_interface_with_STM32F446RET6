
SPI_INTERFACE_WITH_ATMEGA324PB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043ac  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08004570  08004570  00005570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045a0  080045a0  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  080045a0  080045a0  000055a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080045a8  080045a8  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045a8  080045a8  000055a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080045ac  080045ac  000055ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080045b0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000018c  2000000c  080045bc  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000198  080045bc  00006198  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b059  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b72  00000000  00000000  00011095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000940  00000000  00000000  00012c08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000723  00000000  00000000  00013548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002106b  00000000  00000000  00013c6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000be34  00000000  00000000  00034cd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c9950  00000000  00000000  00040b0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010a45a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000025b0  00000000  00000000  0010a4a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  0010ca50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08004558 	.word	0x08004558

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08004558 	.word	0x08004558

08000204 <strcmp>:
 8000204:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
 800020c:	2a01      	cmp	r2, #1
 800020e:	bf28      	it	cs
 8000210:	429a      	cmpcs	r2, r3
 8000212:	d0f7      	beq.n	8000204 <strcmp>
 8000214:	1ad0      	subs	r0, r2, r3
 8000216:	4770      	bx	lr

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050c:	f000 fd0e 	bl	8000f2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000510:	f000 f81c 	bl	800054c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000514:	f000 f90e 	bl	8000734 <MX_GPIO_Init>
  MX_DMA_Init();
 8000518:	f000 f8d6 	bl	80006c8 <MX_DMA_Init>
  MX_SPI1_Init();
 800051c:	f000 f876 	bl	800060c <MX_SPI1_Init>
  MX_UART4_Init();
 8000520:	f000 f8a8 	bl	8000674 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  if(HAL_SPI_Receive_IT(&hspi1,spiRxBuffer, sizeof(spiRxBuffer)- 1) != HAL_OK)
 8000524:	2202      	movs	r2, #2
 8000526:	4905      	ldr	r1, [pc, #20]	@ (800053c <main+0x34>)
 8000528:	4805      	ldr	r0, [pc, #20]	@ (8000540 <main+0x38>)
 800052a:	f002 f9b3 	bl	8002894 <HAL_SPI_Receive_IT>
  {
	  //Error_Handler();
  }
  if(HAL_UART_Receive_IT(&huart4, &uartRxBuffer, 1) != HAL_OK)
 800052e:	2201      	movs	r2, #1
 8000530:	4904      	ldr	r1, [pc, #16]	@ (8000544 <main+0x3c>)
 8000532:	4805      	ldr	r0, [pc, #20]	@ (8000548 <main+0x40>)
 8000534:	f003 f869 	bl	800360a <HAL_UART_Receive_IT>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000538:	bf00      	nop
 800053a:	e7fd      	b.n	8000538 <main+0x30>
 800053c:	2000018c 	.word	0x2000018c
 8000540:	20000028 	.word	0x20000028
 8000544:	20000188 	.word	0x20000188
 8000548:	200000e0 	.word	0x200000e0

0800054c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b094      	sub	sp, #80	@ 0x50
 8000550:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000552:	f107 031c 	add.w	r3, r7, #28
 8000556:	2234      	movs	r2, #52	@ 0x34
 8000558:	2100      	movs	r1, #0
 800055a:	4618      	mov	r0, r3
 800055c:	f003 ffd0 	bl	8004500 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000560:	f107 0308 	add.w	r3, r7, #8
 8000564:	2200      	movs	r2, #0
 8000566:	601a      	str	r2, [r3, #0]
 8000568:	605a      	str	r2, [r3, #4]
 800056a:	609a      	str	r2, [r3, #8]
 800056c:	60da      	str	r2, [r3, #12]
 800056e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000570:	2300      	movs	r3, #0
 8000572:	607b      	str	r3, [r7, #4]
 8000574:	4b23      	ldr	r3, [pc, #140]	@ (8000604 <SystemClock_Config+0xb8>)
 8000576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000578:	4a22      	ldr	r2, [pc, #136]	@ (8000604 <SystemClock_Config+0xb8>)
 800057a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800057e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000580:	4b20      	ldr	r3, [pc, #128]	@ (8000604 <SystemClock_Config+0xb8>)
 8000582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000584:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000588:	607b      	str	r3, [r7, #4]
 800058a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800058c:	2300      	movs	r3, #0
 800058e:	603b      	str	r3, [r7, #0]
 8000590:	4b1d      	ldr	r3, [pc, #116]	@ (8000608 <SystemClock_Config+0xbc>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000598:	4a1b      	ldr	r2, [pc, #108]	@ (8000608 <SystemClock_Config+0xbc>)
 800059a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800059e:	6013      	str	r3, [r2, #0]
 80005a0:	4b19      	ldr	r3, [pc, #100]	@ (8000608 <SystemClock_Config+0xbc>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005a8:	603b      	str	r3, [r7, #0]
 80005aa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005ac:	2302      	movs	r3, #2
 80005ae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005b0:	2301      	movs	r3, #1
 80005b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005b4:	2310      	movs	r3, #16
 80005b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005b8:	2300      	movs	r3, #0
 80005ba:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005bc:	f107 031c 	add.w	r3, r7, #28
 80005c0:	4618      	mov	r0, r3
 80005c2:	f001 fe3f 	bl	8002244 <HAL_RCC_OscConfig>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80005cc:	f000 fae8 	bl	8000ba0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d0:	230f      	movs	r3, #15
 80005d2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005d4:	2300      	movs	r3, #0
 80005d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d8:	2300      	movs	r3, #0
 80005da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005dc:	2300      	movs	r3, #0
 80005de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e0:	2300      	movs	r3, #0
 80005e2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005e4:	f107 0308 	add.w	r3, r7, #8
 80005e8:	2100      	movs	r1, #0
 80005ea:	4618      	mov	r0, r3
 80005ec:	f001 fb66 	bl	8001cbc <HAL_RCC_ClockConfig>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <SystemClock_Config+0xae>
  {
    Error_Handler();
 80005f6:	f000 fad3 	bl	8000ba0 <Error_Handler>
  }
}
 80005fa:	bf00      	nop
 80005fc:	3750      	adds	r7, #80	@ 0x50
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	40023800 	.word	0x40023800
 8000608:	40007000 	.word	0x40007000

0800060c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000610:	4b16      	ldr	r3, [pc, #88]	@ (800066c <MX_SPI1_Init+0x60>)
 8000612:	4a17      	ldr	r2, [pc, #92]	@ (8000670 <MX_SPI1_Init+0x64>)
 8000614:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000616:	4b15      	ldr	r3, [pc, #84]	@ (800066c <MX_SPI1_Init+0x60>)
 8000618:	2200      	movs	r2, #0
 800061a:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800061c:	4b13      	ldr	r3, [pc, #76]	@ (800066c <MX_SPI1_Init+0x60>)
 800061e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000622:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000624:	4b11      	ldr	r3, [pc, #68]	@ (800066c <MX_SPI1_Init+0x60>)
 8000626:	2200      	movs	r2, #0
 8000628:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800062a:	4b10      	ldr	r3, [pc, #64]	@ (800066c <MX_SPI1_Init+0x60>)
 800062c:	2200      	movs	r2, #0
 800062e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000630:	4b0e      	ldr	r3, [pc, #56]	@ (800066c <MX_SPI1_Init+0x60>)
 8000632:	2200      	movs	r2, #0
 8000634:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000636:	4b0d      	ldr	r3, [pc, #52]	@ (800066c <MX_SPI1_Init+0x60>)
 8000638:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800063c:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800063e:	4b0b      	ldr	r3, [pc, #44]	@ (800066c <MX_SPI1_Init+0x60>)
 8000640:	2200      	movs	r2, #0
 8000642:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000644:	4b09      	ldr	r3, [pc, #36]	@ (800066c <MX_SPI1_Init+0x60>)
 8000646:	2200      	movs	r2, #0
 8000648:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800064a:	4b08      	ldr	r3, [pc, #32]	@ (800066c <MX_SPI1_Init+0x60>)
 800064c:	2200      	movs	r2, #0
 800064e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000650:	4b06      	ldr	r3, [pc, #24]	@ (800066c <MX_SPI1_Init+0x60>)
 8000652:	220a      	movs	r2, #10
 8000654:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000656:	4805      	ldr	r0, [pc, #20]	@ (800066c <MX_SPI1_Init+0x60>)
 8000658:	f002 f892 	bl	8002780 <HAL_SPI_Init>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <MX_SPI1_Init+0x5a>
  {
    Error_Handler();
 8000662:	f000 fa9d 	bl	8000ba0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000666:	bf00      	nop
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	20000028 	.word	0x20000028
 8000670:	40013000 	.word	0x40013000

08000674 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000678:	4b11      	ldr	r3, [pc, #68]	@ (80006c0 <MX_UART4_Init+0x4c>)
 800067a:	4a12      	ldr	r2, [pc, #72]	@ (80006c4 <MX_UART4_Init+0x50>)
 800067c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800067e:	4b10      	ldr	r3, [pc, #64]	@ (80006c0 <MX_UART4_Init+0x4c>)
 8000680:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000684:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000686:	4b0e      	ldr	r3, [pc, #56]	@ (80006c0 <MX_UART4_Init+0x4c>)
 8000688:	2200      	movs	r2, #0
 800068a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800068c:	4b0c      	ldr	r3, [pc, #48]	@ (80006c0 <MX_UART4_Init+0x4c>)
 800068e:	2200      	movs	r2, #0
 8000690:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000692:	4b0b      	ldr	r3, [pc, #44]	@ (80006c0 <MX_UART4_Init+0x4c>)
 8000694:	2200      	movs	r2, #0
 8000696:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000698:	4b09      	ldr	r3, [pc, #36]	@ (80006c0 <MX_UART4_Init+0x4c>)
 800069a:	220c      	movs	r2, #12
 800069c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800069e:	4b08      	ldr	r3, [pc, #32]	@ (80006c0 <MX_UART4_Init+0x4c>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80006a4:	4b06      	ldr	r3, [pc, #24]	@ (80006c0 <MX_UART4_Init+0x4c>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80006aa:	4805      	ldr	r0, [pc, #20]	@ (80006c0 <MX_UART4_Init+0x4c>)
 80006ac:	f002 fe3b 	bl	8003326 <HAL_UART_Init>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80006b6:	f000 fa73 	bl	8000ba0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80006ba:	bf00      	nop
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	200000e0 	.word	0x200000e0
 80006c4:	40004c00 	.word	0x40004c00

080006c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80006ce:	2300      	movs	r3, #0
 80006d0:	607b      	str	r3, [r7, #4]
 80006d2:	4b17      	ldr	r3, [pc, #92]	@ (8000730 <MX_DMA_Init+0x68>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d6:	4a16      	ldr	r2, [pc, #88]	@ (8000730 <MX_DMA_Init+0x68>)
 80006d8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80006dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80006de:	4b14      	ldr	r3, [pc, #80]	@ (8000730 <MX_DMA_Init+0x68>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006ea:	2300      	movs	r3, #0
 80006ec:	603b      	str	r3, [r7, #0]
 80006ee:	4b10      	ldr	r3, [pc, #64]	@ (8000730 <MX_DMA_Init+0x68>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f2:	4a0f      	ldr	r2, [pc, #60]	@ (8000730 <MX_DMA_Init+0x68>)
 80006f4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80006f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006fa:	4b0d      	ldr	r3, [pc, #52]	@ (8000730 <MX_DMA_Init+0x68>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000702:	603b      	str	r3, [r7, #0]
 8000704:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000706:	2200      	movs	r2, #0
 8000708:	2100      	movs	r1, #0
 800070a:	200d      	movs	r0, #13
 800070c:	f000 fd5b 	bl	80011c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000710:	200d      	movs	r0, #13
 8000712:	f000 fd74 	bl	80011fe <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000716:	2200      	movs	r2, #0
 8000718:	2100      	movs	r1, #0
 800071a:	2038      	movs	r0, #56	@ 0x38
 800071c:	f000 fd53 	bl	80011c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000720:	2038      	movs	r0, #56	@ 0x38
 8000722:	f000 fd6c 	bl	80011fe <HAL_NVIC_EnableIRQ>

}
 8000726:	bf00      	nop
 8000728:	3708      	adds	r7, #8
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	40023800 	.word	0x40023800

08000734 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b088      	sub	sp, #32
 8000738:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073a:	f107 030c 	add.w	r3, r7, #12
 800073e:	2200      	movs	r2, #0
 8000740:	601a      	str	r2, [r3, #0]
 8000742:	605a      	str	r2, [r3, #4]
 8000744:	609a      	str	r2, [r3, #8]
 8000746:	60da      	str	r2, [r3, #12]
 8000748:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	60bb      	str	r3, [r7, #8]
 800074e:	4b2a      	ldr	r3, [pc, #168]	@ (80007f8 <MX_GPIO_Init+0xc4>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000752:	4a29      	ldr	r2, [pc, #164]	@ (80007f8 <MX_GPIO_Init+0xc4>)
 8000754:	f043 0301 	orr.w	r3, r3, #1
 8000758:	6313      	str	r3, [r2, #48]	@ 0x30
 800075a:	4b27      	ldr	r3, [pc, #156]	@ (80007f8 <MX_GPIO_Init+0xc4>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075e:	f003 0301 	and.w	r3, r3, #1
 8000762:	60bb      	str	r3, [r7, #8]
 8000764:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	607b      	str	r3, [r7, #4]
 800076a:	4b23      	ldr	r3, [pc, #140]	@ (80007f8 <MX_GPIO_Init+0xc4>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076e:	4a22      	ldr	r2, [pc, #136]	@ (80007f8 <MX_GPIO_Init+0xc4>)
 8000770:	f043 0304 	orr.w	r3, r3, #4
 8000774:	6313      	str	r3, [r2, #48]	@ 0x30
 8000776:	4b20      	ldr	r3, [pc, #128]	@ (80007f8 <MX_GPIO_Init+0xc4>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077a:	f003 0304 	and.w	r3, r3, #4
 800077e:	607b      	str	r3, [r7, #4]
 8000780:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	603b      	str	r3, [r7, #0]
 8000786:	4b1c      	ldr	r3, [pc, #112]	@ (80007f8 <MX_GPIO_Init+0xc4>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078a:	4a1b      	ldr	r2, [pc, #108]	@ (80007f8 <MX_GPIO_Init+0xc4>)
 800078c:	f043 0302 	orr.w	r3, r3, #2
 8000790:	6313      	str	r3, [r2, #48]	@ 0x30
 8000792:	4b19      	ldr	r3, [pc, #100]	@ (80007f8 <MX_GPIO_Init+0xc4>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000796:	f003 0302 	and.w	r3, r3, #2
 800079a:	603b      	str	r3, [r7, #0]
 800079c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Touch_LED_1_Pin|Touch_LED_2_Pin|Touch_LED_3_Pin, GPIO_PIN_RESET);
 800079e:	2200      	movs	r2, #0
 80007a0:	f240 4103 	movw	r1, #1027	@ 0x403
 80007a4:	4815      	ldr	r0, [pc, #84]	@ (80007fc <MX_GPIO_Init+0xc8>)
 80007a6:	f001 fa55 	bl	8001c54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Touch_LED_4_GPIO_Port, Touch_LED_4_Pin, GPIO_PIN_RESET);
 80007aa:	2200      	movs	r2, #0
 80007ac:	2108      	movs	r1, #8
 80007ae:	4814      	ldr	r0, [pc, #80]	@ (8000800 <MX_GPIO_Init+0xcc>)
 80007b0:	f001 fa50 	bl	8001c54 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Touch_LED_1_Pin Touch_LED_2_Pin Touch_LED_3_Pin */
  GPIO_InitStruct.Pin = Touch_LED_1_Pin|Touch_LED_2_Pin|Touch_LED_3_Pin;
 80007b4:	f240 4303 	movw	r3, #1027	@ 0x403
 80007b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ba:	2301      	movs	r3, #1
 80007bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007be:	2300      	movs	r3, #0
 80007c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c2:	2300      	movs	r3, #0
 80007c4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c6:	f107 030c 	add.w	r3, r7, #12
 80007ca:	4619      	mov	r1, r3
 80007cc:	480b      	ldr	r0, [pc, #44]	@ (80007fc <MX_GPIO_Init+0xc8>)
 80007ce:	f001 f8ad 	bl	800192c <HAL_GPIO_Init>

  /*Configure GPIO pin : Touch_LED_4_Pin */
  GPIO_InitStruct.Pin = Touch_LED_4_Pin;
 80007d2:	2308      	movs	r3, #8
 80007d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d6:	2301      	movs	r3, #1
 80007d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007da:	2300      	movs	r3, #0
 80007dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007de:	2300      	movs	r3, #0
 80007e0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Touch_LED_4_GPIO_Port, &GPIO_InitStruct);
 80007e2:	f107 030c 	add.w	r3, r7, #12
 80007e6:	4619      	mov	r1, r3
 80007e8:	4805      	ldr	r0, [pc, #20]	@ (8000800 <MX_GPIO_Init+0xcc>)
 80007ea:	f001 f89f 	bl	800192c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007ee:	bf00      	nop
 80007f0:	3720      	adds	r7, #32
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	40023800 	.word	0x40023800
 80007fc:	40020000 	.word	0x40020000
 8000800:	40020400 	.word	0x40020400

08000804 <HAL_SPI_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b086      	sub	sp, #24
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
	if(hspi->Instance == SPI1)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4a74      	ldr	r2, [pc, #464]	@ (80009e4 <HAL_SPI_RxCpltCallback+0x1e0>)
 8000812:	4293      	cmp	r3, r2
 8000814:	f040 80e2 	bne.w	80009dc <HAL_SPI_RxCpltCallback+0x1d8>
	{
		spiRxBuffer[sizeof(spiRxBuffer) - 1] = '\0';
 8000818:	4b73      	ldr	r3, [pc, #460]	@ (80009e8 <HAL_SPI_RxCpltCallback+0x1e4>)
 800081a:	2200      	movs	r2, #0
 800081c:	709a      	strb	r2, [r3, #2]
		if(strcmp((char *)spiRxBuffer, "L1") == 0)
 800081e:	4973      	ldr	r1, [pc, #460]	@ (80009ec <HAL_SPI_RxCpltCallback+0x1e8>)
 8000820:	4871      	ldr	r0, [pc, #452]	@ (80009e8 <HAL_SPI_RxCpltCallback+0x1e4>)
 8000822:	f7ff fcef 	bl	8000204 <strcmp>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d12f      	bne.n	800088c <HAL_SPI_RxCpltCallback+0x88>
		{
			HAL_GPIO_TogglePin(Touch_LED_1_GPIO_Port, Touch_LED_1_Pin);
 800082c:	2101      	movs	r1, #1
 800082e:	4870      	ldr	r0, [pc, #448]	@ (80009f0 <HAL_SPI_RxCpltCallback+0x1ec>)
 8000830:	f001 fa29 	bl	8001c86 <HAL_GPIO_TogglePin>
			uint8_t Newlight1_state = (light1State == 0 ) ? 1 : 0;
 8000834:	4b6f      	ldr	r3, [pc, #444]	@ (80009f4 <HAL_SPI_RxCpltCallback+0x1f0>)
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	b2db      	uxtb	r3, r3
 800083a:	2b00      	cmp	r3, #0
 800083c:	bf0c      	ite	eq
 800083e:	2301      	moveq	r3, #1
 8000840:	2300      	movne	r3, #0
 8000842:	b2db      	uxtb	r3, r3
 8000844:	753b      	strb	r3, [r7, #20]
			if(Newlight1_state != light1State){
 8000846:	4b6b      	ldr	r3, [pc, #428]	@ (80009f4 <HAL_SPI_RxCpltCallback+0x1f0>)
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	b2db      	uxtb	r3, r3
 800084c:	7d3a      	ldrb	r2, [r7, #20]
 800084e:	429a      	cmp	r2, r3
 8000850:	f000 80bf 	beq.w	80009d2 <HAL_SPI_RxCpltCallback+0x1ce>
				light1State = Newlight1_state;
 8000854:	4a67      	ldr	r2, [pc, #412]	@ (80009f4 <HAL_SPI_RxCpltCallback+0x1f0>)
 8000856:	7d3b      	ldrb	r3, [r7, #20]
 8000858:	7013      	strb	r3, [r2, #0]
				if(light1State == 1){
 800085a:	4b66      	ldr	r3, [pc, #408]	@ (80009f4 <HAL_SPI_RxCpltCallback+0x1f0>)
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	b2db      	uxtb	r3, r3
 8000860:	2b01      	cmp	r3, #1
 8000862:	d109      	bne.n	8000878 <HAL_SPI_RxCpltCallback+0x74>
					uint8_t uartTxData = 'A';
 8000864:	2341      	movs	r3, #65	@ 0x41
 8000866:	74fb      	strb	r3, [r7, #19]
					HAL_UART_Transmit(&huart4, &uartTxData, 1, 10);
 8000868:	f107 0113 	add.w	r1, r7, #19
 800086c:	230a      	movs	r3, #10
 800086e:	2201      	movs	r2, #1
 8000870:	4861      	ldr	r0, [pc, #388]	@ (80009f8 <HAL_SPI_RxCpltCallback+0x1f4>)
 8000872:	f002 fda8 	bl	80033c6 <HAL_UART_Transmit>
 8000876:	e0ac      	b.n	80009d2 <HAL_SPI_RxCpltCallback+0x1ce>
				}else{
					uint8_t uartTxData = 'B';
 8000878:	2342      	movs	r3, #66	@ 0x42
 800087a:	74bb      	strb	r3, [r7, #18]
					HAL_UART_Transmit(&huart4, &uartTxData, 1, 10);
 800087c:	f107 0112 	add.w	r1, r7, #18
 8000880:	230a      	movs	r3, #10
 8000882:	2201      	movs	r2, #1
 8000884:	485c      	ldr	r0, [pc, #368]	@ (80009f8 <HAL_SPI_RxCpltCallback+0x1f4>)
 8000886:	f002 fd9e 	bl	80033c6 <HAL_UART_Transmit>
 800088a:	e0a2      	b.n	80009d2 <HAL_SPI_RxCpltCallback+0x1ce>
				}
			}

		}
		else if(strcmp((char *)spiRxBuffer, "L2") == 0)
 800088c:	495b      	ldr	r1, [pc, #364]	@ (80009fc <HAL_SPI_RxCpltCallback+0x1f8>)
 800088e:	4856      	ldr	r0, [pc, #344]	@ (80009e8 <HAL_SPI_RxCpltCallback+0x1e4>)
 8000890:	f7ff fcb8 	bl	8000204 <strcmp>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d12f      	bne.n	80008fa <HAL_SPI_RxCpltCallback+0xf6>
		{
			HAL_GPIO_TogglePin(Touch_LED_2_GPIO_Port, Touch_LED_2_Pin);
 800089a:	2102      	movs	r1, #2
 800089c:	4854      	ldr	r0, [pc, #336]	@ (80009f0 <HAL_SPI_RxCpltCallback+0x1ec>)
 800089e:	f001 f9f2 	bl	8001c86 <HAL_GPIO_TogglePin>
		    uint8_t Newlight2_state = (light2State == 0) ? 1: 0;
 80008a2:	4b57      	ldr	r3, [pc, #348]	@ (8000a00 <HAL_SPI_RxCpltCallback+0x1fc>)
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	b2db      	uxtb	r3, r3
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	bf0c      	ite	eq
 80008ac:	2301      	moveq	r3, #1
 80008ae:	2300      	movne	r3, #0
 80008b0:	b2db      	uxtb	r3, r3
 80008b2:	757b      	strb	r3, [r7, #21]
		    if(Newlight2_state != light2State){
 80008b4:	4b52      	ldr	r3, [pc, #328]	@ (8000a00 <HAL_SPI_RxCpltCallback+0x1fc>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	b2db      	uxtb	r3, r3
 80008ba:	7d7a      	ldrb	r2, [r7, #21]
 80008bc:	429a      	cmp	r2, r3
 80008be:	f000 8088 	beq.w	80009d2 <HAL_SPI_RxCpltCallback+0x1ce>
		    	light2State = Newlight2_state;
 80008c2:	4a4f      	ldr	r2, [pc, #316]	@ (8000a00 <HAL_SPI_RxCpltCallback+0x1fc>)
 80008c4:	7d7b      	ldrb	r3, [r7, #21]
 80008c6:	7013      	strb	r3, [r2, #0]
		    	if(light2State == 1){
 80008c8:	4b4d      	ldr	r3, [pc, #308]	@ (8000a00 <HAL_SPI_RxCpltCallback+0x1fc>)
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	b2db      	uxtb	r3, r3
 80008ce:	2b01      	cmp	r3, #1
 80008d0:	d109      	bne.n	80008e6 <HAL_SPI_RxCpltCallback+0xe2>
		    		uint8_t uartTxData = 'C';
 80008d2:	2343      	movs	r3, #67	@ 0x43
 80008d4:	747b      	strb	r3, [r7, #17]
		    		HAL_UART_Transmit(&huart4, &uartTxData, 1, 10);
 80008d6:	f107 0111 	add.w	r1, r7, #17
 80008da:	230a      	movs	r3, #10
 80008dc:	2201      	movs	r2, #1
 80008de:	4846      	ldr	r0, [pc, #280]	@ (80009f8 <HAL_SPI_RxCpltCallback+0x1f4>)
 80008e0:	f002 fd71 	bl	80033c6 <HAL_UART_Transmit>
 80008e4:	e075      	b.n	80009d2 <HAL_SPI_RxCpltCallback+0x1ce>
		    	}else{
		    		uint8_t uartTxData = 'D';
 80008e6:	2344      	movs	r3, #68	@ 0x44
 80008e8:	743b      	strb	r3, [r7, #16]
		    	    HAL_UART_Transmit(&huart4, &uartTxData, 1, 10);
 80008ea:	f107 0110 	add.w	r1, r7, #16
 80008ee:	230a      	movs	r3, #10
 80008f0:	2201      	movs	r2, #1
 80008f2:	4841      	ldr	r0, [pc, #260]	@ (80009f8 <HAL_SPI_RxCpltCallback+0x1f4>)
 80008f4:	f002 fd67 	bl	80033c6 <HAL_UART_Transmit>
 80008f8:	e06b      	b.n	80009d2 <HAL_SPI_RxCpltCallback+0x1ce>
		    	}
		    }
		}
		else if(strcmp((char *)spiRxBuffer, "L3") == 0)
 80008fa:	4942      	ldr	r1, [pc, #264]	@ (8000a04 <HAL_SPI_RxCpltCallback+0x200>)
 80008fc:	483a      	ldr	r0, [pc, #232]	@ (80009e8 <HAL_SPI_RxCpltCallback+0x1e4>)
 80008fe:	f7ff fc81 	bl	8000204 <strcmp>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d12f      	bne.n	8000968 <HAL_SPI_RxCpltCallback+0x164>
		{
			HAL_GPIO_TogglePin(Touch_LED_3_GPIO_Port, Touch_LED_3_Pin);
 8000908:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800090c:	4838      	ldr	r0, [pc, #224]	@ (80009f0 <HAL_SPI_RxCpltCallback+0x1ec>)
 800090e:	f001 f9ba 	bl	8001c86 <HAL_GPIO_TogglePin>
			uint8_t Newlight3_state = (light3State == 0) ? 1 : 0;
 8000912:	4b3d      	ldr	r3, [pc, #244]	@ (8000a08 <HAL_SPI_RxCpltCallback+0x204>)
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	b2db      	uxtb	r3, r3
 8000918:	2b00      	cmp	r3, #0
 800091a:	bf0c      	ite	eq
 800091c:	2301      	moveq	r3, #1
 800091e:	2300      	movne	r3, #0
 8000920:	b2db      	uxtb	r3, r3
 8000922:	75bb      	strb	r3, [r7, #22]
			if(Newlight3_state != light3State){
 8000924:	4b38      	ldr	r3, [pc, #224]	@ (8000a08 <HAL_SPI_RxCpltCallback+0x204>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	b2db      	uxtb	r3, r3
 800092a:	7dba      	ldrb	r2, [r7, #22]
 800092c:	429a      	cmp	r2, r3
 800092e:	d050      	beq.n	80009d2 <HAL_SPI_RxCpltCallback+0x1ce>
				light3State = Newlight3_state;
 8000930:	4a35      	ldr	r2, [pc, #212]	@ (8000a08 <HAL_SPI_RxCpltCallback+0x204>)
 8000932:	7dbb      	ldrb	r3, [r7, #22]
 8000934:	7013      	strb	r3, [r2, #0]
				if(light3State == 1){
 8000936:	4b34      	ldr	r3, [pc, #208]	@ (8000a08 <HAL_SPI_RxCpltCallback+0x204>)
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	b2db      	uxtb	r3, r3
 800093c:	2b01      	cmp	r3, #1
 800093e:	d109      	bne.n	8000954 <HAL_SPI_RxCpltCallback+0x150>
					uint8_t uartTxData = 'E';
 8000940:	2345      	movs	r3, #69	@ 0x45
 8000942:	73fb      	strb	r3, [r7, #15]
					HAL_UART_Transmit(&huart4, &uartTxData, 1, 10);
 8000944:	f107 010f 	add.w	r1, r7, #15
 8000948:	230a      	movs	r3, #10
 800094a:	2201      	movs	r2, #1
 800094c:	482a      	ldr	r0, [pc, #168]	@ (80009f8 <HAL_SPI_RxCpltCallback+0x1f4>)
 800094e:	f002 fd3a 	bl	80033c6 <HAL_UART_Transmit>
 8000952:	e03e      	b.n	80009d2 <HAL_SPI_RxCpltCallback+0x1ce>
				}else{
					uint8_t uartTxData = 'F';
 8000954:	2346      	movs	r3, #70	@ 0x46
 8000956:	73bb      	strb	r3, [r7, #14]
				    HAL_UART_Transmit(&huart4, &uartTxData, 1, 10);
 8000958:	f107 010e 	add.w	r1, r7, #14
 800095c:	230a      	movs	r3, #10
 800095e:	2201      	movs	r2, #1
 8000960:	4825      	ldr	r0, [pc, #148]	@ (80009f8 <HAL_SPI_RxCpltCallback+0x1f4>)
 8000962:	f002 fd30 	bl	80033c6 <HAL_UART_Transmit>
 8000966:	e034      	b.n	80009d2 <HAL_SPI_RxCpltCallback+0x1ce>
				}
			}
		}
		else if(strcmp((char *)spiRxBuffer, "L4") == 0)
 8000968:	4928      	ldr	r1, [pc, #160]	@ (8000a0c <HAL_SPI_RxCpltCallback+0x208>)
 800096a:	481f      	ldr	r0, [pc, #124]	@ (80009e8 <HAL_SPI_RxCpltCallback+0x1e4>)
 800096c:	f7ff fc4a 	bl	8000204 <strcmp>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d12d      	bne.n	80009d2 <HAL_SPI_RxCpltCallback+0x1ce>
		{
			HAL_GPIO_TogglePin(Touch_LED_4_GPIO_Port, Touch_LED_4_Pin);
 8000976:	2108      	movs	r1, #8
 8000978:	4825      	ldr	r0, [pc, #148]	@ (8000a10 <HAL_SPI_RxCpltCallback+0x20c>)
 800097a:	f001 f984 	bl	8001c86 <HAL_GPIO_TogglePin>
			uint8_t Newlight4_state = (light4State == 0) ? 1 : 0;
 800097e:	4b25      	ldr	r3, [pc, #148]	@ (8000a14 <HAL_SPI_RxCpltCallback+0x210>)
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	b2db      	uxtb	r3, r3
 8000984:	2b00      	cmp	r3, #0
 8000986:	bf0c      	ite	eq
 8000988:	2301      	moveq	r3, #1
 800098a:	2300      	movne	r3, #0
 800098c:	b2db      	uxtb	r3, r3
 800098e:	75fb      	strb	r3, [r7, #23]
			if(Newlight4_state != light4State){
 8000990:	4b20      	ldr	r3, [pc, #128]	@ (8000a14 <HAL_SPI_RxCpltCallback+0x210>)
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	b2db      	uxtb	r3, r3
 8000996:	7dfa      	ldrb	r2, [r7, #23]
 8000998:	429a      	cmp	r2, r3
 800099a:	d01a      	beq.n	80009d2 <HAL_SPI_RxCpltCallback+0x1ce>
				light4State = Newlight4_state;
 800099c:	4a1d      	ldr	r2, [pc, #116]	@ (8000a14 <HAL_SPI_RxCpltCallback+0x210>)
 800099e:	7dfb      	ldrb	r3, [r7, #23]
 80009a0:	7013      	strb	r3, [r2, #0]
		        if(light4State == 1){
 80009a2:	4b1c      	ldr	r3, [pc, #112]	@ (8000a14 <HAL_SPI_RxCpltCallback+0x210>)
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	b2db      	uxtb	r3, r3
 80009a8:	2b01      	cmp	r3, #1
 80009aa:	d109      	bne.n	80009c0 <HAL_SPI_RxCpltCallback+0x1bc>
		        	uint8_t uartTxData = 'G';
 80009ac:	2347      	movs	r3, #71	@ 0x47
 80009ae:	737b      	strb	r3, [r7, #13]
		        	HAL_UART_Transmit(&huart4, &uartTxData, 1, 10);
 80009b0:	f107 010d 	add.w	r1, r7, #13
 80009b4:	230a      	movs	r3, #10
 80009b6:	2201      	movs	r2, #1
 80009b8:	480f      	ldr	r0, [pc, #60]	@ (80009f8 <HAL_SPI_RxCpltCallback+0x1f4>)
 80009ba:	f002 fd04 	bl	80033c6 <HAL_UART_Transmit>
 80009be:	e008      	b.n	80009d2 <HAL_SPI_RxCpltCallback+0x1ce>
		        }else{
		        	uint8_t uartTxData = 'H';
 80009c0:	2348      	movs	r3, #72	@ 0x48
 80009c2:	733b      	strb	r3, [r7, #12]
		        	HAL_UART_Transmit(&huart4, &uartTxData, 1, 10);
 80009c4:	f107 010c 	add.w	r1, r7, #12
 80009c8:	230a      	movs	r3, #10
 80009ca:	2201      	movs	r2, #1
 80009cc:	480a      	ldr	r0, [pc, #40]	@ (80009f8 <HAL_SPI_RxCpltCallback+0x1f4>)
 80009ce:	f002 fcfa 	bl	80033c6 <HAL_UART_Transmit>
		        }
			}
		}
		if (HAL_SPI_Receive_IT(hspi, spiRxBuffer, sizeof(spiRxBuffer) - 1) != HAL_OK)
 80009d2:	2202      	movs	r2, #2
 80009d4:	4904      	ldr	r1, [pc, #16]	@ (80009e8 <HAL_SPI_RxCpltCallback+0x1e4>)
 80009d6:	6878      	ldr	r0, [r7, #4]
 80009d8:	f001 ff5c 	bl	8002894 <HAL_SPI_Receive_IT>
		{
		    //Error_Handler();
		}
	}
}
 80009dc:	bf00      	nop
 80009de:	3718      	adds	r7, #24
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	40013000 	.word	0x40013000
 80009e8:	2000018c 	.word	0x2000018c
 80009ec:	08004570 	.word	0x08004570
 80009f0:	40020000 	.word	0x40020000
 80009f4:	2000018f 	.word	0x2000018f
 80009f8:	200000e0 	.word	0x200000e0
 80009fc:	08004574 	.word	0x08004574
 8000a00:	20000190 	.word	0x20000190
 8000a04:	08004578 	.word	0x08004578
 8000a08:	20000191 	.word	0x20000191
 8000a0c:	0800457c 	.word	0x0800457c
 8000a10:	40020400 	.word	0x40020400
 8000a14:	20000192 	.word	0x20000192

08000a18 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == UART4){
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a55      	ldr	r2, [pc, #340]	@ (8000b7c <HAL_UART_RxCpltCallback+0x164>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	f040 80a3 	bne.w	8000b72 <HAL_UART_RxCpltCallback+0x15a>

        if (uartRxBuffer == 'L') {
 8000a2c:	4b54      	ldr	r3, [pc, #336]	@ (8000b80 <HAL_UART_RxCpltCallback+0x168>)
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	2b4c      	cmp	r3, #76	@ 0x4c
 8000a32:	d123      	bne.n	8000a7c <HAL_UART_RxCpltCallback+0x64>
        	//HAL_GPIO_TogglePin(Touch_LED_1_GPIO_Port, Touch_LED_1_Pin);
            if (HAL_UART_Receive(&huart4, &uartRxBuffer, 1, 10) == HAL_OK) {
 8000a34:	230a      	movs	r3, #10
 8000a36:	2201      	movs	r2, #1
 8000a38:	4951      	ldr	r1, [pc, #324]	@ (8000b80 <HAL_UART_RxCpltCallback+0x168>)
 8000a3a:	4852      	ldr	r0, [pc, #328]	@ (8000b84 <HAL_UART_RxCpltCallback+0x16c>)
 8000a3c:	f002 fd4e 	bl	80034dc <HAL_UART_Receive>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	f040 8090 	bne.w	8000b68 <HAL_UART_RxCpltCallback+0x150>
                if (uartRxBuffer == '1') {
 8000a48:	4b4d      	ldr	r3, [pc, #308]	@ (8000b80 <HAL_UART_RxCpltCallback+0x168>)
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	2b31      	cmp	r3, #49	@ 0x31
 8000a4e:	d108      	bne.n	8000a62 <HAL_UART_RxCpltCallback+0x4a>
                    HAL_GPIO_WritePin(Touch_LED_1_GPIO_Port, Touch_LED_1_Pin, GPIO_PIN_SET);    // light1_ON()
 8000a50:	2201      	movs	r2, #1
 8000a52:	2101      	movs	r1, #1
 8000a54:	484c      	ldr	r0, [pc, #304]	@ (8000b88 <HAL_UART_RxCpltCallback+0x170>)
 8000a56:	f001 f8fd 	bl	8001c54 <HAL_GPIO_WritePin>
                    light1State = 1;
 8000a5a:	4b4c      	ldr	r3, [pc, #304]	@ (8000b8c <HAL_UART_RxCpltCallback+0x174>)
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	701a      	strb	r2, [r3, #0]
 8000a60:	e082      	b.n	8000b68 <HAL_UART_RxCpltCallback+0x150>
                } else if (uartRxBuffer == '0') {
 8000a62:	4b47      	ldr	r3, [pc, #284]	@ (8000b80 <HAL_UART_RxCpltCallback+0x168>)
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	2b30      	cmp	r3, #48	@ 0x30
 8000a68:	d17e      	bne.n	8000b68 <HAL_UART_RxCpltCallback+0x150>
                    HAL_GPIO_WritePin(Touch_LED_1_GPIO_Port, Touch_LED_1_Pin, GPIO_PIN_RESET);  // light1_OFF()
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	2101      	movs	r1, #1
 8000a6e:	4846      	ldr	r0, [pc, #280]	@ (8000b88 <HAL_UART_RxCpltCallback+0x170>)
 8000a70:	f001 f8f0 	bl	8001c54 <HAL_GPIO_WritePin>
                    light1State = 0;
 8000a74:	4b45      	ldr	r3, [pc, #276]	@ (8000b8c <HAL_UART_RxCpltCallback+0x174>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	701a      	strb	r2, [r3, #0]
 8000a7a:	e075      	b.n	8000b68 <HAL_UART_RxCpltCallback+0x150>
                }
            }
        }
        else if (uartRxBuffer == 'M') {
 8000a7c:	4b40      	ldr	r3, [pc, #256]	@ (8000b80 <HAL_UART_RxCpltCallback+0x168>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	2b4d      	cmp	r3, #77	@ 0x4d
 8000a82:	d122      	bne.n	8000aca <HAL_UART_RxCpltCallback+0xb2>
        	//HAL_GPIO_TogglePin(Touch_LED_2_GPIO_Port, Touch_LED_2_Pin);
            if (HAL_UART_Receive(&huart4, &uartRxBuffer, 1, 10) == HAL_OK) {
 8000a84:	230a      	movs	r3, #10
 8000a86:	2201      	movs	r2, #1
 8000a88:	493d      	ldr	r1, [pc, #244]	@ (8000b80 <HAL_UART_RxCpltCallback+0x168>)
 8000a8a:	483e      	ldr	r0, [pc, #248]	@ (8000b84 <HAL_UART_RxCpltCallback+0x16c>)
 8000a8c:	f002 fd26 	bl	80034dc <HAL_UART_Receive>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d168      	bne.n	8000b68 <HAL_UART_RxCpltCallback+0x150>
                if (uartRxBuffer == '1') {
 8000a96:	4b3a      	ldr	r3, [pc, #232]	@ (8000b80 <HAL_UART_RxCpltCallback+0x168>)
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	2b31      	cmp	r3, #49	@ 0x31
 8000a9c:	d108      	bne.n	8000ab0 <HAL_UART_RxCpltCallback+0x98>
                    HAL_GPIO_WritePin(Touch_LED_2_GPIO_Port, Touch_LED_2_Pin, GPIO_PIN_SET);    // light2_ON()
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	2102      	movs	r1, #2
 8000aa2:	4839      	ldr	r0, [pc, #228]	@ (8000b88 <HAL_UART_RxCpltCallback+0x170>)
 8000aa4:	f001 f8d6 	bl	8001c54 <HAL_GPIO_WritePin>
                    light2State = 1;
 8000aa8:	4b39      	ldr	r3, [pc, #228]	@ (8000b90 <HAL_UART_RxCpltCallback+0x178>)
 8000aaa:	2201      	movs	r2, #1
 8000aac:	701a      	strb	r2, [r3, #0]
 8000aae:	e05b      	b.n	8000b68 <HAL_UART_RxCpltCallback+0x150>
                } else if (uartRxBuffer == '0') {
 8000ab0:	4b33      	ldr	r3, [pc, #204]	@ (8000b80 <HAL_UART_RxCpltCallback+0x168>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	2b30      	cmp	r3, #48	@ 0x30
 8000ab6:	d157      	bne.n	8000b68 <HAL_UART_RxCpltCallback+0x150>
                    HAL_GPIO_WritePin(Touch_LED_2_GPIO_Port, Touch_LED_2_Pin, GPIO_PIN_RESET);  // light2_OFF()
 8000ab8:	2200      	movs	r2, #0
 8000aba:	2102      	movs	r1, #2
 8000abc:	4832      	ldr	r0, [pc, #200]	@ (8000b88 <HAL_UART_RxCpltCallback+0x170>)
 8000abe:	f001 f8c9 	bl	8001c54 <HAL_GPIO_WritePin>
                    light2State = 0;
 8000ac2:	4b33      	ldr	r3, [pc, #204]	@ (8000b90 <HAL_UART_RxCpltCallback+0x178>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	701a      	strb	r2, [r3, #0]
 8000ac8:	e04e      	b.n	8000b68 <HAL_UART_RxCpltCallback+0x150>
                }
            }
        }
        else if (uartRxBuffer == 'N') {
 8000aca:	4b2d      	ldr	r3, [pc, #180]	@ (8000b80 <HAL_UART_RxCpltCallback+0x168>)
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	2b4e      	cmp	r3, #78	@ 0x4e
 8000ad0:	d124      	bne.n	8000b1c <HAL_UART_RxCpltCallback+0x104>
        	//HAL_GPIO_TogglePin(Touch_LED_3_GPIO_Port, Touch_LED_3_Pin);
            if (HAL_UART_Receive(&huart4, &uartRxBuffer, 1, 10) == HAL_OK) {
 8000ad2:	230a      	movs	r3, #10
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	492a      	ldr	r1, [pc, #168]	@ (8000b80 <HAL_UART_RxCpltCallback+0x168>)
 8000ad8:	482a      	ldr	r0, [pc, #168]	@ (8000b84 <HAL_UART_RxCpltCallback+0x16c>)
 8000ada:	f002 fcff 	bl	80034dc <HAL_UART_Receive>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d141      	bne.n	8000b68 <HAL_UART_RxCpltCallback+0x150>
                if (uartRxBuffer == '1') {
 8000ae4:	4b26      	ldr	r3, [pc, #152]	@ (8000b80 <HAL_UART_RxCpltCallback+0x168>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	2b31      	cmp	r3, #49	@ 0x31
 8000aea:	d109      	bne.n	8000b00 <HAL_UART_RxCpltCallback+0xe8>
                    HAL_GPIO_WritePin(Touch_LED_3_GPIO_Port, Touch_LED_3_Pin, GPIO_PIN_SET);                      // light3_ON()
 8000aec:	2201      	movs	r2, #1
 8000aee:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000af2:	4825      	ldr	r0, [pc, #148]	@ (8000b88 <HAL_UART_RxCpltCallback+0x170>)
 8000af4:	f001 f8ae 	bl	8001c54 <HAL_GPIO_WritePin>
                    light3State = 1;
 8000af8:	4b26      	ldr	r3, [pc, #152]	@ (8000b94 <HAL_UART_RxCpltCallback+0x17c>)
 8000afa:	2201      	movs	r2, #1
 8000afc:	701a      	strb	r2, [r3, #0]
 8000afe:	e033      	b.n	8000b68 <HAL_UART_RxCpltCallback+0x150>
                } else if (uartRxBuffer == '0') {
 8000b00:	4b1f      	ldr	r3, [pc, #124]	@ (8000b80 <HAL_UART_RxCpltCallback+0x168>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	2b30      	cmp	r3, #48	@ 0x30
 8000b06:	d12f      	bne.n	8000b68 <HAL_UART_RxCpltCallback+0x150>
                    HAL_GPIO_WritePin(Touch_LED_3_GPIO_Port, Touch_LED_3_Pin, GPIO_PIN_RESET);                    // light3_OFF()
 8000b08:	2200      	movs	r2, #0
 8000b0a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b0e:	481e      	ldr	r0, [pc, #120]	@ (8000b88 <HAL_UART_RxCpltCallback+0x170>)
 8000b10:	f001 f8a0 	bl	8001c54 <HAL_GPIO_WritePin>
                    light3State = 0;
 8000b14:	4b1f      	ldr	r3, [pc, #124]	@ (8000b94 <HAL_UART_RxCpltCallback+0x17c>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	701a      	strb	r2, [r3, #0]
 8000b1a:	e025      	b.n	8000b68 <HAL_UART_RxCpltCallback+0x150>
                }
            }
        }
        else if (uartRxBuffer == 'O') {
 8000b1c:	4b18      	ldr	r3, [pc, #96]	@ (8000b80 <HAL_UART_RxCpltCallback+0x168>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	2b4f      	cmp	r3, #79	@ 0x4f
 8000b22:	d121      	bne.n	8000b68 <HAL_UART_RxCpltCallback+0x150>
        	//HAL_GPIO_TogglePin(Touch_LED_4_GPIO_Port, Touch_LED_4_Pin);
            if (HAL_UART_Receive(&huart4, &uartRxBuffer, 1, 10) == HAL_OK) {
 8000b24:	230a      	movs	r3, #10
 8000b26:	2201      	movs	r2, #1
 8000b28:	4915      	ldr	r1, [pc, #84]	@ (8000b80 <HAL_UART_RxCpltCallback+0x168>)
 8000b2a:	4816      	ldr	r0, [pc, #88]	@ (8000b84 <HAL_UART_RxCpltCallback+0x16c>)
 8000b2c:	f002 fcd6 	bl	80034dc <HAL_UART_Receive>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d118      	bne.n	8000b68 <HAL_UART_RxCpltCallback+0x150>
                if (uartRxBuffer == '1') {
 8000b36:	4b12      	ldr	r3, [pc, #72]	@ (8000b80 <HAL_UART_RxCpltCallback+0x168>)
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	2b31      	cmp	r3, #49	@ 0x31
 8000b3c:	d108      	bne.n	8000b50 <HAL_UART_RxCpltCallback+0x138>
                    HAL_GPIO_WritePin(Touch_LED_4_GPIO_Port, Touch_LED_4_Pin, GPIO_PIN_SET);  // light4_ON()
 8000b3e:	2201      	movs	r2, #1
 8000b40:	2108      	movs	r1, #8
 8000b42:	4815      	ldr	r0, [pc, #84]	@ (8000b98 <HAL_UART_RxCpltCallback+0x180>)
 8000b44:	f001 f886 	bl	8001c54 <HAL_GPIO_WritePin>
                    light4State = 1;
 8000b48:	4b14      	ldr	r3, [pc, #80]	@ (8000b9c <HAL_UART_RxCpltCallback+0x184>)
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	701a      	strb	r2, [r3, #0]
 8000b4e:	e00b      	b.n	8000b68 <HAL_UART_RxCpltCallback+0x150>
                } else if (uartRxBuffer == '0') {
 8000b50:	4b0b      	ldr	r3, [pc, #44]	@ (8000b80 <HAL_UART_RxCpltCallback+0x168>)
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	2b30      	cmp	r3, #48	@ 0x30
 8000b56:	d107      	bne.n	8000b68 <HAL_UART_RxCpltCallback+0x150>
                    HAL_GPIO_WritePin(Touch_LED_4_GPIO_Port, Touch_LED_4_Pin, GPIO_PIN_RESET);  // light4_OFF()
 8000b58:	2200      	movs	r2, #0
 8000b5a:	2108      	movs	r1, #8
 8000b5c:	480e      	ldr	r0, [pc, #56]	@ (8000b98 <HAL_UART_RxCpltCallback+0x180>)
 8000b5e:	f001 f879 	bl	8001c54 <HAL_GPIO_WritePin>
                    light4State = 0;
 8000b62:	4b0e      	ldr	r3, [pc, #56]	@ (8000b9c <HAL_UART_RxCpltCallback+0x184>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	701a      	strb	r2, [r3, #0]
                }
            }
        }
        HAL_UART_Receive_IT(&huart4, &uartRxBuffer, 1);
 8000b68:	2201      	movs	r2, #1
 8000b6a:	4905      	ldr	r1, [pc, #20]	@ (8000b80 <HAL_UART_RxCpltCallback+0x168>)
 8000b6c:	4805      	ldr	r0, [pc, #20]	@ (8000b84 <HAL_UART_RxCpltCallback+0x16c>)
 8000b6e:	f002 fd4c 	bl	800360a <HAL_UART_Receive_IT>
	}
}
 8000b72:	bf00      	nop
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	40004c00 	.word	0x40004c00
 8000b80:	20000188 	.word	0x20000188
 8000b84:	200000e0 	.word	0x200000e0
 8000b88:	40020000 	.word	0x40020000
 8000b8c:	2000018f 	.word	0x2000018f
 8000b90:	20000190 	.word	0x20000190
 8000b94:	20000191 	.word	0x20000191
 8000b98:	40020400 	.word	0x40020400
 8000b9c:	20000192 	.word	0x20000192

08000ba0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ba4:	b672      	cpsid	i
}
 8000ba6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ba8:	bf00      	nop
 8000baa:	e7fd      	b.n	8000ba8 <Error_Handler+0x8>

08000bac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	607b      	str	r3, [r7, #4]
 8000bb6:	4b10      	ldr	r3, [pc, #64]	@ (8000bf8 <HAL_MspInit+0x4c>)
 8000bb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bba:	4a0f      	ldr	r2, [pc, #60]	@ (8000bf8 <HAL_MspInit+0x4c>)
 8000bbc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bc0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bc2:	4b0d      	ldr	r3, [pc, #52]	@ (8000bf8 <HAL_MspInit+0x4c>)
 8000bc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bc6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bca:	607b      	str	r3, [r7, #4]
 8000bcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	603b      	str	r3, [r7, #0]
 8000bd2:	4b09      	ldr	r3, [pc, #36]	@ (8000bf8 <HAL_MspInit+0x4c>)
 8000bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bd6:	4a08      	ldr	r2, [pc, #32]	@ (8000bf8 <HAL_MspInit+0x4c>)
 8000bd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bdc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bde:	4b06      	ldr	r3, [pc, #24]	@ (8000bf8 <HAL_MspInit+0x4c>)
 8000be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000be2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000be6:	603b      	str	r3, [r7, #0]
 8000be8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bea:	bf00      	nop
 8000bec:	370c      	adds	r7, #12
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	40023800 	.word	0x40023800

08000bfc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b08a      	sub	sp, #40	@ 0x28
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c04:	f107 0314 	add.w	r3, r7, #20
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	605a      	str	r2, [r3, #4]
 8000c0e:	609a      	str	r2, [r3, #8]
 8000c10:	60da      	str	r2, [r3, #12]
 8000c12:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a34      	ldr	r2, [pc, #208]	@ (8000cec <HAL_SPI_MspInit+0xf0>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d161      	bne.n	8000ce2 <HAL_SPI_MspInit+0xe6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	613b      	str	r3, [r7, #16]
 8000c22:	4b33      	ldr	r3, [pc, #204]	@ (8000cf0 <HAL_SPI_MspInit+0xf4>)
 8000c24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c26:	4a32      	ldr	r2, [pc, #200]	@ (8000cf0 <HAL_SPI_MspInit+0xf4>)
 8000c28:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c2e:	4b30      	ldr	r3, [pc, #192]	@ (8000cf0 <HAL_SPI_MspInit+0xf4>)
 8000c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c32:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c36:	613b      	str	r3, [r7, #16]
 8000c38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	60fb      	str	r3, [r7, #12]
 8000c3e:	4b2c      	ldr	r3, [pc, #176]	@ (8000cf0 <HAL_SPI_MspInit+0xf4>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c42:	4a2b      	ldr	r2, [pc, #172]	@ (8000cf0 <HAL_SPI_MspInit+0xf4>)
 8000c44:	f043 0301 	orr.w	r3, r3, #1
 8000c48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c4a:	4b29      	ldr	r3, [pc, #164]	@ (8000cf0 <HAL_SPI_MspInit+0xf4>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c4e:	f003 0301 	and.w	r3, r3, #1
 8000c52:	60fb      	str	r3, [r7, #12]
 8000c54:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000c56:	23a0      	movs	r3, #160	@ 0xa0
 8000c58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c62:	2303      	movs	r3, #3
 8000c64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c66:	2305      	movs	r3, #5
 8000c68:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c6a:	f107 0314 	add.w	r3, r7, #20
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4820      	ldr	r0, [pc, #128]	@ (8000cf4 <HAL_SPI_MspInit+0xf8>)
 8000c72:	f000 fe5b 	bl	800192c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8000c76:	4b20      	ldr	r3, [pc, #128]	@ (8000cf8 <HAL_SPI_MspInit+0xfc>)
 8000c78:	4a20      	ldr	r2, [pc, #128]	@ (8000cfc <HAL_SPI_MspInit+0x100>)
 8000c7a:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8000c7c:	4b1e      	ldr	r3, [pc, #120]	@ (8000cf8 <HAL_SPI_MspInit+0xfc>)
 8000c7e:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8000c82:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c84:	4b1c      	ldr	r3, [pc, #112]	@ (8000cf8 <HAL_SPI_MspInit+0xfc>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c8a:	4b1b      	ldr	r3, [pc, #108]	@ (8000cf8 <HAL_SPI_MspInit+0xfc>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c90:	4b19      	ldr	r3, [pc, #100]	@ (8000cf8 <HAL_SPI_MspInit+0xfc>)
 8000c92:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c96:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c98:	4b17      	ldr	r3, [pc, #92]	@ (8000cf8 <HAL_SPI_MspInit+0xfc>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c9e:	4b16      	ldr	r3, [pc, #88]	@ (8000cf8 <HAL_SPI_MspInit+0xfc>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8000ca4:	4b14      	ldr	r3, [pc, #80]	@ (8000cf8 <HAL_SPI_MspInit+0xfc>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000caa:	4b13      	ldr	r3, [pc, #76]	@ (8000cf8 <HAL_SPI_MspInit+0xfc>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000cb0:	4b11      	ldr	r3, [pc, #68]	@ (8000cf8 <HAL_SPI_MspInit+0xfc>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000cb6:	4810      	ldr	r0, [pc, #64]	@ (8000cf8 <HAL_SPI_MspInit+0xfc>)
 8000cb8:	f000 fabc 	bl	8001234 <HAL_DMA_Init>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 8000cc2:	f7ff ff6d 	bl	8000ba0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	4a0b      	ldr	r2, [pc, #44]	@ (8000cf8 <HAL_SPI_MspInit+0xfc>)
 8000cca:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000ccc:	4a0a      	ldr	r2, [pc, #40]	@ (8000cf8 <HAL_SPI_MspInit+0xfc>)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	2023      	movs	r0, #35	@ 0x23
 8000cd8:	f000 fa75 	bl	80011c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000cdc:	2023      	movs	r0, #35	@ 0x23
 8000cde:	f000 fa8e 	bl	80011fe <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000ce2:	bf00      	nop
 8000ce4:	3728      	adds	r7, #40	@ 0x28
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40013000 	.word	0x40013000
 8000cf0:	40023800 	.word	0x40023800
 8000cf4:	40020000 	.word	0x40020000
 8000cf8:	20000080 	.word	0x20000080
 8000cfc:	40026410 	.word	0x40026410

08000d00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b08a      	sub	sp, #40	@ 0x28
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d08:	f107 0314 	add.w	r3, r7, #20
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
 8000d10:	605a      	str	r2, [r3, #4]
 8000d12:	609a      	str	r2, [r3, #8]
 8000d14:	60da      	str	r2, [r3, #12]
 8000d16:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a34      	ldr	r2, [pc, #208]	@ (8000df0 <HAL_UART_MspInit+0xf0>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d162      	bne.n	8000de8 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	613b      	str	r3, [r7, #16]
 8000d26:	4b33      	ldr	r3, [pc, #204]	@ (8000df4 <HAL_UART_MspInit+0xf4>)
 8000d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d2a:	4a32      	ldr	r2, [pc, #200]	@ (8000df4 <HAL_UART_MspInit+0xf4>)
 8000d2c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000d30:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d32:	4b30      	ldr	r3, [pc, #192]	@ (8000df4 <HAL_UART_MspInit+0xf4>)
 8000d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d36:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000d3a:	613b      	str	r3, [r7, #16]
 8000d3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	60fb      	str	r3, [r7, #12]
 8000d42:	4b2c      	ldr	r3, [pc, #176]	@ (8000df4 <HAL_UART_MspInit+0xf4>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d46:	4a2b      	ldr	r2, [pc, #172]	@ (8000df4 <HAL_UART_MspInit+0xf4>)
 8000d48:	f043 0304 	orr.w	r3, r3, #4
 8000d4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d4e:	4b29      	ldr	r3, [pc, #164]	@ (8000df4 <HAL_UART_MspInit+0xf4>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d52:	f003 0304 	and.w	r3, r3, #4
 8000d56:	60fb      	str	r3, [r7, #12]
 8000d58:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000d5a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000d5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d60:	2302      	movs	r3, #2
 8000d62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d64:	2300      	movs	r3, #0
 8000d66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d68:	2303      	movs	r3, #3
 8000d6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000d6c:	2308      	movs	r3, #8
 8000d6e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d70:	f107 0314 	add.w	r3, r7, #20
 8000d74:	4619      	mov	r1, r3
 8000d76:	4820      	ldr	r0, [pc, #128]	@ (8000df8 <HAL_UART_MspInit+0xf8>)
 8000d78:	f000 fdd8 	bl	800192c <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8000d7c:	4b1f      	ldr	r3, [pc, #124]	@ (8000dfc <HAL_UART_MspInit+0xfc>)
 8000d7e:	4a20      	ldr	r2, [pc, #128]	@ (8000e00 <HAL_UART_MspInit+0x100>)
 8000d80:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8000d82:	4b1e      	ldr	r3, [pc, #120]	@ (8000dfc <HAL_UART_MspInit+0xfc>)
 8000d84:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000d88:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d8a:	4b1c      	ldr	r3, [pc, #112]	@ (8000dfc <HAL_UART_MspInit+0xfc>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d90:	4b1a      	ldr	r3, [pc, #104]	@ (8000dfc <HAL_UART_MspInit+0xfc>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d96:	4b19      	ldr	r3, [pc, #100]	@ (8000dfc <HAL_UART_MspInit+0xfc>)
 8000d98:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d9c:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d9e:	4b17      	ldr	r3, [pc, #92]	@ (8000dfc <HAL_UART_MspInit+0xfc>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000da4:	4b15      	ldr	r3, [pc, #84]	@ (8000dfc <HAL_UART_MspInit+0xfc>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8000daa:	4b14      	ldr	r3, [pc, #80]	@ (8000dfc <HAL_UART_MspInit+0xfc>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000db0:	4b12      	ldr	r3, [pc, #72]	@ (8000dfc <HAL_UART_MspInit+0xfc>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000db6:	4b11      	ldr	r3, [pc, #68]	@ (8000dfc <HAL_UART_MspInit+0xfc>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8000dbc:	480f      	ldr	r0, [pc, #60]	@ (8000dfc <HAL_UART_MspInit+0xfc>)
 8000dbe:	f000 fa39 	bl	8001234 <HAL_DMA_Init>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8000dc8:	f7ff feea 	bl	8000ba0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	4a0b      	ldr	r2, [pc, #44]	@ (8000dfc <HAL_UART_MspInit+0xfc>)
 8000dd0:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000dd2:	4a0a      	ldr	r2, [pc, #40]	@ (8000dfc <HAL_UART_MspInit+0xfc>)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000dd8:	2200      	movs	r2, #0
 8000dda:	2100      	movs	r1, #0
 8000ddc:	2034      	movs	r0, #52	@ 0x34
 8000dde:	f000 f9f2 	bl	80011c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000de2:	2034      	movs	r0, #52	@ 0x34
 8000de4:	f000 fa0b 	bl	80011fe <HAL_NVIC_EnableIRQ>

  /* USER CODE END UART4_MspInit 1 */

  }

}
 8000de8:	bf00      	nop
 8000dea:	3728      	adds	r7, #40	@ 0x28
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	40004c00 	.word	0x40004c00
 8000df4:	40023800 	.word	0x40023800
 8000df8:	40020800 	.word	0x40020800
 8000dfc:	20000128 	.word	0x20000128
 8000e00:	40026040 	.word	0x40026040

08000e04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e08:	bf00      	nop
 8000e0a:	e7fd      	b.n	8000e08 <NMI_Handler+0x4>

08000e0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e10:	bf00      	nop
 8000e12:	e7fd      	b.n	8000e10 <HardFault_Handler+0x4>

08000e14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e18:	bf00      	nop
 8000e1a:	e7fd      	b.n	8000e18 <MemManage_Handler+0x4>

08000e1c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e20:	bf00      	nop
 8000e22:	e7fd      	b.n	8000e20 <BusFault_Handler+0x4>

08000e24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e28:	bf00      	nop
 8000e2a:	e7fd      	b.n	8000e28 <UsageFault_Handler+0x4>

08000e2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e30:	bf00      	nop
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr

08000e3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e3a:	b480      	push	{r7}
 8000e3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e3e:	bf00      	nop
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr

08000e48 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e4c:	bf00      	nop
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr

08000e56 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e56:	b580      	push	{r7, lr}
 8000e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e5a:	f000 f8b9 	bl	8000fd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e5e:	bf00      	nop
 8000e60:	bd80      	pop	{r7, pc}
	...

08000e64 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8000e68:	4802      	ldr	r0, [pc, #8]	@ (8000e74 <DMA1_Stream2_IRQHandler+0x10>)
 8000e6a:	f000 fb23 	bl	80014b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8000e6e:	bf00      	nop
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	20000128 	.word	0x20000128

08000e78 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000e7c:	4802      	ldr	r0, [pc, #8]	@ (8000e88 <SPI1_IRQHandler+0x10>)
 8000e7e:	f001 fe37 	bl	8002af0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000e82:	bf00      	nop
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	20000028 	.word	0x20000028

08000e8c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000e90:	4802      	ldr	r0, [pc, #8]	@ (8000e9c <UART4_IRQHandler+0x10>)
 8000e92:	f002 fbdf 	bl	8003654 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000e96:	bf00      	nop
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	200000e0 	.word	0x200000e0

08000ea0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8000ea4:	4802      	ldr	r0, [pc, #8]	@ (8000eb0 <DMA2_Stream0_IRQHandler+0x10>)
 8000ea6:	f000 fb05 	bl	80014b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000eaa:	bf00      	nop
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	20000080 	.word	0x20000080

08000eb4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000eb8:	4b06      	ldr	r3, [pc, #24]	@ (8000ed4 <SystemInit+0x20>)
 8000eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ebe:	4a05      	ldr	r2, [pc, #20]	@ (8000ed4 <SystemInit+0x20>)
 8000ec0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ec4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ec8:	bf00      	nop
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	e000ed00 	.word	0xe000ed00

08000ed8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ed8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f10 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000edc:	f7ff ffea 	bl	8000eb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ee0:	480c      	ldr	r0, [pc, #48]	@ (8000f14 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ee2:	490d      	ldr	r1, [pc, #52]	@ (8000f18 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ee4:	4a0d      	ldr	r2, [pc, #52]	@ (8000f1c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ee6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ee8:	e002      	b.n	8000ef0 <LoopCopyDataInit>

08000eea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000eec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eee:	3304      	adds	r3, #4

08000ef0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ef0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ef2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ef4:	d3f9      	bcc.n	8000eea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ef6:	4a0a      	ldr	r2, [pc, #40]	@ (8000f20 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ef8:	4c0a      	ldr	r4, [pc, #40]	@ (8000f24 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000efa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000efc:	e001      	b.n	8000f02 <LoopFillZerobss>

08000efe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000efe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f00:	3204      	adds	r2, #4

08000f02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f04:	d3fb      	bcc.n	8000efe <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000f06:	f003 fb03 	bl	8004510 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f0a:	f7ff fafd 	bl	8000508 <main>
  bx  lr    
 8000f0e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f10:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f18:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f1c:	080045b0 	.word	0x080045b0
  ldr r2, =_sbss
 8000f20:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f24:	20000198 	.word	0x20000198

08000f28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f28:	e7fe      	b.n	8000f28 <ADC_IRQHandler>
	...

08000f2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f30:	4b0e      	ldr	r3, [pc, #56]	@ (8000f6c <HAL_Init+0x40>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a0d      	ldr	r2, [pc, #52]	@ (8000f6c <HAL_Init+0x40>)
 8000f36:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f3c:	4b0b      	ldr	r3, [pc, #44]	@ (8000f6c <HAL_Init+0x40>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a0a      	ldr	r2, [pc, #40]	@ (8000f6c <HAL_Init+0x40>)
 8000f42:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f48:	4b08      	ldr	r3, [pc, #32]	@ (8000f6c <HAL_Init+0x40>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a07      	ldr	r2, [pc, #28]	@ (8000f6c <HAL_Init+0x40>)
 8000f4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f54:	2003      	movs	r0, #3
 8000f56:	f000 f92b 	bl	80011b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f5a:	200f      	movs	r0, #15
 8000f5c:	f000 f808 	bl	8000f70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f60:	f7ff fe24 	bl	8000bac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f64:	2300      	movs	r3, #0
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	40023c00 	.word	0x40023c00

08000f70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f78:	4b12      	ldr	r3, [pc, #72]	@ (8000fc4 <HAL_InitTick+0x54>)
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	4b12      	ldr	r3, [pc, #72]	@ (8000fc8 <HAL_InitTick+0x58>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	4619      	mov	r1, r3
 8000f82:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f000 f943 	bl	800121a <HAL_SYSTICK_Config>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e00e      	b.n	8000fbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2b0f      	cmp	r3, #15
 8000fa2:	d80a      	bhi.n	8000fba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	6879      	ldr	r1, [r7, #4]
 8000fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fac:	f000 f90b 	bl	80011c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fb0:	4a06      	ldr	r2, [pc, #24]	@ (8000fcc <HAL_InitTick+0x5c>)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	e000      	b.n	8000fbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	20000000 	.word	0x20000000
 8000fc8:	20000008 	.word	0x20000008
 8000fcc:	20000004 	.word	0x20000004

08000fd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fd4:	4b06      	ldr	r3, [pc, #24]	@ (8000ff0 <HAL_IncTick+0x20>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	461a      	mov	r2, r3
 8000fda:	4b06      	ldr	r3, [pc, #24]	@ (8000ff4 <HAL_IncTick+0x24>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4413      	add	r3, r2
 8000fe0:	4a04      	ldr	r2, [pc, #16]	@ (8000ff4 <HAL_IncTick+0x24>)
 8000fe2:	6013      	str	r3, [r2, #0]
}
 8000fe4:	bf00      	nop
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	20000008 	.word	0x20000008
 8000ff4:	20000194 	.word	0x20000194

08000ff8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  return uwTick;
 8000ffc:	4b03      	ldr	r3, [pc, #12]	@ (800100c <HAL_GetTick+0x14>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
}
 8001000:	4618      	mov	r0, r3
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	20000194 	.word	0x20000194

08001010 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001010:	b480      	push	{r7}
 8001012:	b085      	sub	sp, #20
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	f003 0307 	and.w	r3, r3, #7
 800101e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001020:	4b0c      	ldr	r3, [pc, #48]	@ (8001054 <__NVIC_SetPriorityGrouping+0x44>)
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001026:	68ba      	ldr	r2, [r7, #8]
 8001028:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800102c:	4013      	ands	r3, r2
 800102e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001038:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800103c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001040:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001042:	4a04      	ldr	r2, [pc, #16]	@ (8001054 <__NVIC_SetPriorityGrouping+0x44>)
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	60d3      	str	r3, [r2, #12]
}
 8001048:	bf00      	nop
 800104a:	3714      	adds	r7, #20
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr
 8001054:	e000ed00 	.word	0xe000ed00

08001058 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800105c:	4b04      	ldr	r3, [pc, #16]	@ (8001070 <__NVIC_GetPriorityGrouping+0x18>)
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	0a1b      	lsrs	r3, r3, #8
 8001062:	f003 0307 	and.w	r3, r3, #7
}
 8001066:	4618      	mov	r0, r3
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	e000ed00 	.word	0xe000ed00

08001074 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800107e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001082:	2b00      	cmp	r3, #0
 8001084:	db0b      	blt.n	800109e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001086:	79fb      	ldrb	r3, [r7, #7]
 8001088:	f003 021f 	and.w	r2, r3, #31
 800108c:	4907      	ldr	r1, [pc, #28]	@ (80010ac <__NVIC_EnableIRQ+0x38>)
 800108e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001092:	095b      	lsrs	r3, r3, #5
 8001094:	2001      	movs	r0, #1
 8001096:	fa00 f202 	lsl.w	r2, r0, r2
 800109a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800109e:	bf00      	nop
 80010a0:	370c      	adds	r7, #12
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	e000e100 	.word	0xe000e100

080010b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	6039      	str	r1, [r7, #0]
 80010ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	db0a      	blt.n	80010da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	b2da      	uxtb	r2, r3
 80010c8:	490c      	ldr	r1, [pc, #48]	@ (80010fc <__NVIC_SetPriority+0x4c>)
 80010ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ce:	0112      	lsls	r2, r2, #4
 80010d0:	b2d2      	uxtb	r2, r2
 80010d2:	440b      	add	r3, r1
 80010d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010d8:	e00a      	b.n	80010f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	b2da      	uxtb	r2, r3
 80010de:	4908      	ldr	r1, [pc, #32]	@ (8001100 <__NVIC_SetPriority+0x50>)
 80010e0:	79fb      	ldrb	r3, [r7, #7]
 80010e2:	f003 030f 	and.w	r3, r3, #15
 80010e6:	3b04      	subs	r3, #4
 80010e8:	0112      	lsls	r2, r2, #4
 80010ea:	b2d2      	uxtb	r2, r2
 80010ec:	440b      	add	r3, r1
 80010ee:	761a      	strb	r2, [r3, #24]
}
 80010f0:	bf00      	nop
 80010f2:	370c      	adds	r7, #12
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr
 80010fc:	e000e100 	.word	0xe000e100
 8001100:	e000ed00 	.word	0xe000ed00

08001104 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001104:	b480      	push	{r7}
 8001106:	b089      	sub	sp, #36	@ 0x24
 8001108:	af00      	add	r7, sp, #0
 800110a:	60f8      	str	r0, [r7, #12]
 800110c:	60b9      	str	r1, [r7, #8]
 800110e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	f003 0307 	and.w	r3, r3, #7
 8001116:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	f1c3 0307 	rsb	r3, r3, #7
 800111e:	2b04      	cmp	r3, #4
 8001120:	bf28      	it	cs
 8001122:	2304      	movcs	r3, #4
 8001124:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	3304      	adds	r3, #4
 800112a:	2b06      	cmp	r3, #6
 800112c:	d902      	bls.n	8001134 <NVIC_EncodePriority+0x30>
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	3b03      	subs	r3, #3
 8001132:	e000      	b.n	8001136 <NVIC_EncodePriority+0x32>
 8001134:	2300      	movs	r3, #0
 8001136:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001138:	f04f 32ff 	mov.w	r2, #4294967295
 800113c:	69bb      	ldr	r3, [r7, #24]
 800113e:	fa02 f303 	lsl.w	r3, r2, r3
 8001142:	43da      	mvns	r2, r3
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	401a      	ands	r2, r3
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800114c:	f04f 31ff 	mov.w	r1, #4294967295
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	fa01 f303 	lsl.w	r3, r1, r3
 8001156:	43d9      	mvns	r1, r3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800115c:	4313      	orrs	r3, r2
         );
}
 800115e:	4618      	mov	r0, r3
 8001160:	3724      	adds	r7, #36	@ 0x24
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
	...

0800116c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	3b01      	subs	r3, #1
 8001178:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800117c:	d301      	bcc.n	8001182 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800117e:	2301      	movs	r3, #1
 8001180:	e00f      	b.n	80011a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001182:	4a0a      	ldr	r2, [pc, #40]	@ (80011ac <SysTick_Config+0x40>)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	3b01      	subs	r3, #1
 8001188:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800118a:	210f      	movs	r1, #15
 800118c:	f04f 30ff 	mov.w	r0, #4294967295
 8001190:	f7ff ff8e 	bl	80010b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001194:	4b05      	ldr	r3, [pc, #20]	@ (80011ac <SysTick_Config+0x40>)
 8001196:	2200      	movs	r2, #0
 8001198:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800119a:	4b04      	ldr	r3, [pc, #16]	@ (80011ac <SysTick_Config+0x40>)
 800119c:	2207      	movs	r2, #7
 800119e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011a0:	2300      	movs	r3, #0
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	e000e010 	.word	0xe000e010

080011b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f7ff ff29 	bl	8001010 <__NVIC_SetPriorityGrouping>
}
 80011be:	bf00      	nop
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b086      	sub	sp, #24
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	4603      	mov	r3, r0
 80011ce:	60b9      	str	r1, [r7, #8]
 80011d0:	607a      	str	r2, [r7, #4]
 80011d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011d4:	2300      	movs	r3, #0
 80011d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011d8:	f7ff ff3e 	bl	8001058 <__NVIC_GetPriorityGrouping>
 80011dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011de:	687a      	ldr	r2, [r7, #4]
 80011e0:	68b9      	ldr	r1, [r7, #8]
 80011e2:	6978      	ldr	r0, [r7, #20]
 80011e4:	f7ff ff8e 	bl	8001104 <NVIC_EncodePriority>
 80011e8:	4602      	mov	r2, r0
 80011ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ee:	4611      	mov	r1, r2
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff ff5d 	bl	80010b0 <__NVIC_SetPriority>
}
 80011f6:	bf00      	nop
 80011f8:	3718      	adds	r7, #24
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011fe:	b580      	push	{r7, lr}
 8001200:	b082      	sub	sp, #8
 8001202:	af00      	add	r7, sp, #0
 8001204:	4603      	mov	r3, r0
 8001206:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001208:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff ff31 	bl	8001074 <__NVIC_EnableIRQ>
}
 8001212:	bf00      	nop
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800121a:	b580      	push	{r7, lr}
 800121c:	b082      	sub	sp, #8
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f7ff ffa2 	bl	800116c <SysTick_Config>
 8001228:	4603      	mov	r3, r0
}
 800122a:	4618      	mov	r0, r3
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
	...

08001234 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b086      	sub	sp, #24
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800123c:	2300      	movs	r3, #0
 800123e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001240:	f7ff feda 	bl	8000ff8 <HAL_GetTick>
 8001244:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d101      	bne.n	8001250 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800124c:	2301      	movs	r3, #1
 800124e:	e099      	b.n	8001384 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2202      	movs	r2, #2
 8001254:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2200      	movs	r2, #0
 800125c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f022 0201 	bic.w	r2, r2, #1
 800126e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001270:	e00f      	b.n	8001292 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001272:	f7ff fec1 	bl	8000ff8 <HAL_GetTick>
 8001276:	4602      	mov	r2, r0
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	1ad3      	subs	r3, r2, r3
 800127c:	2b05      	cmp	r3, #5
 800127e:	d908      	bls.n	8001292 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2220      	movs	r2, #32
 8001284:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2203      	movs	r2, #3
 800128a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800128e:	2303      	movs	r3, #3
 8001290:	e078      	b.n	8001384 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f003 0301 	and.w	r3, r3, #1
 800129c:	2b00      	cmp	r3, #0
 800129e:	d1e8      	bne.n	8001272 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80012a8:	697a      	ldr	r2, [r7, #20]
 80012aa:	4b38      	ldr	r3, [pc, #224]	@ (800138c <HAL_DMA_Init+0x158>)
 80012ac:	4013      	ands	r3, r2
 80012ae:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	685a      	ldr	r2, [r3, #4]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80012be:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	691b      	ldr	r3, [r3, #16]
 80012c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	699b      	ldr	r3, [r3, #24]
 80012d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6a1b      	ldr	r3, [r3, #32]
 80012dc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80012de:	697a      	ldr	r2, [r7, #20]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012e8:	2b04      	cmp	r3, #4
 80012ea:	d107      	bne.n	80012fc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f4:	4313      	orrs	r3, r2
 80012f6:	697a      	ldr	r2, [r7, #20]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	697a      	ldr	r2, [r7, #20]
 8001302:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	695b      	ldr	r3, [r3, #20]
 800130a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	f023 0307 	bic.w	r3, r3, #7
 8001312:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001318:	697a      	ldr	r2, [r7, #20]
 800131a:	4313      	orrs	r3, r2
 800131c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001322:	2b04      	cmp	r3, #4
 8001324:	d117      	bne.n	8001356 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800132a:	697a      	ldr	r2, [r7, #20]
 800132c:	4313      	orrs	r3, r2
 800132e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001334:	2b00      	cmp	r3, #0
 8001336:	d00e      	beq.n	8001356 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	f000 fa7b 	bl	8001834 <DMA_CheckFifoParam>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d008      	beq.n	8001356 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2240      	movs	r2, #64	@ 0x40
 8001348:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2201      	movs	r2, #1
 800134e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001352:	2301      	movs	r3, #1
 8001354:	e016      	b.n	8001384 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	697a      	ldr	r2, [r7, #20]
 800135c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f000 fa32 	bl	80017c8 <DMA_CalcBaseAndBitshift>
 8001364:	4603      	mov	r3, r0
 8001366:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800136c:	223f      	movs	r2, #63	@ 0x3f
 800136e:	409a      	lsls	r2, r3
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2200      	movs	r2, #0
 8001378:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2201      	movs	r2, #1
 800137e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001382:	2300      	movs	r3, #0
}
 8001384:	4618      	mov	r0, r3
 8001386:	3718      	adds	r7, #24
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	f010803f 	.word	0xf010803f

08001390 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800139c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800139e:	f7ff fe2b 	bl	8000ff8 <HAL_GetTick>
 80013a2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	d008      	beq.n	80013c2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2280      	movs	r2, #128	@ 0x80
 80013b4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2200      	movs	r2, #0
 80013ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e052      	b.n	8001468 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f022 0216 	bic.w	r2, r2, #22
 80013d0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	695a      	ldr	r2, [r3, #20]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80013e0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d103      	bne.n	80013f2 <HAL_DMA_Abort+0x62>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d007      	beq.n	8001402 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f022 0208 	bic.w	r2, r2, #8
 8001400:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f022 0201 	bic.w	r2, r2, #1
 8001410:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001412:	e013      	b.n	800143c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001414:	f7ff fdf0 	bl	8000ff8 <HAL_GetTick>
 8001418:	4602      	mov	r2, r0
 800141a:	68bb      	ldr	r3, [r7, #8]
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	2b05      	cmp	r3, #5
 8001420:	d90c      	bls.n	800143c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2220      	movs	r2, #32
 8001426:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2203      	movs	r2, #3
 800142c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2200      	movs	r2, #0
 8001434:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001438:	2303      	movs	r3, #3
 800143a:	e015      	b.n	8001468 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 0301 	and.w	r3, r3, #1
 8001446:	2b00      	cmp	r3, #0
 8001448:	d1e4      	bne.n	8001414 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800144e:	223f      	movs	r2, #63	@ 0x3f
 8001450:	409a      	lsls	r2, r3
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2201      	movs	r2, #1
 800145a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2200      	movs	r2, #0
 8001462:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001466:	2300      	movs	r3, #0
}
 8001468:	4618      	mov	r0, r3
 800146a:	3710      	adds	r7, #16
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}

08001470 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800147e:	b2db      	uxtb	r3, r3
 8001480:	2b02      	cmp	r3, #2
 8001482:	d004      	beq.n	800148e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2280      	movs	r2, #128	@ 0x80
 8001488:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e00c      	b.n	80014a8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2205      	movs	r2, #5
 8001492:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f022 0201 	bic.w	r2, r2, #1
 80014a4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80014a6:	2300      	movs	r3, #0
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	370c      	adds	r7, #12
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr

080014b4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b086      	sub	sp, #24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80014bc:	2300      	movs	r3, #0
 80014be:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80014c0:	4b8e      	ldr	r3, [pc, #568]	@ (80016fc <HAL_DMA_IRQHandler+0x248>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a8e      	ldr	r2, [pc, #568]	@ (8001700 <HAL_DMA_IRQHandler+0x24c>)
 80014c6:	fba2 2303 	umull	r2, r3, r2, r3
 80014ca:	0a9b      	lsrs	r3, r3, #10
 80014cc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014d2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014de:	2208      	movs	r2, #8
 80014e0:	409a      	lsls	r2, r3
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	4013      	ands	r3, r2
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d01a      	beq.n	8001520 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f003 0304 	and.w	r3, r3, #4
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d013      	beq.n	8001520 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f022 0204 	bic.w	r2, r2, #4
 8001506:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800150c:	2208      	movs	r2, #8
 800150e:	409a      	lsls	r2, r3
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001518:	f043 0201 	orr.w	r2, r3, #1
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001524:	2201      	movs	r2, #1
 8001526:	409a      	lsls	r2, r3
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	4013      	ands	r3, r2
 800152c:	2b00      	cmp	r3, #0
 800152e:	d012      	beq.n	8001556 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	695b      	ldr	r3, [r3, #20]
 8001536:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800153a:	2b00      	cmp	r3, #0
 800153c:	d00b      	beq.n	8001556 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001542:	2201      	movs	r2, #1
 8001544:	409a      	lsls	r2, r3
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800154e:	f043 0202 	orr.w	r2, r3, #2
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800155a:	2204      	movs	r2, #4
 800155c:	409a      	lsls	r2, r3
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	4013      	ands	r3, r2
 8001562:	2b00      	cmp	r3, #0
 8001564:	d012      	beq.n	800158c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f003 0302 	and.w	r3, r3, #2
 8001570:	2b00      	cmp	r3, #0
 8001572:	d00b      	beq.n	800158c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001578:	2204      	movs	r2, #4
 800157a:	409a      	lsls	r2, r3
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001584:	f043 0204 	orr.w	r2, r3, #4
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001590:	2210      	movs	r2, #16
 8001592:	409a      	lsls	r2, r3
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	4013      	ands	r3, r2
 8001598:	2b00      	cmp	r3, #0
 800159a:	d043      	beq.n	8001624 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 0308 	and.w	r3, r3, #8
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d03c      	beq.n	8001624 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015ae:	2210      	movs	r2, #16
 80015b0:	409a      	lsls	r2, r3
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d018      	beq.n	80015f6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d108      	bne.n	80015e4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d024      	beq.n	8001624 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	4798      	blx	r3
 80015e2:	e01f      	b.n	8001624 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d01b      	beq.n	8001624 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	4798      	blx	r3
 80015f4:	e016      	b.n	8001624 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001600:	2b00      	cmp	r3, #0
 8001602:	d107      	bne.n	8001614 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f022 0208 	bic.w	r2, r2, #8
 8001612:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001618:	2b00      	cmp	r3, #0
 800161a:	d003      	beq.n	8001624 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001628:	2220      	movs	r2, #32
 800162a:	409a      	lsls	r2, r3
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	4013      	ands	r3, r2
 8001630:	2b00      	cmp	r3, #0
 8001632:	f000 808f 	beq.w	8001754 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f003 0310 	and.w	r3, r3, #16
 8001640:	2b00      	cmp	r3, #0
 8001642:	f000 8087 	beq.w	8001754 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800164a:	2220      	movs	r2, #32
 800164c:	409a      	lsls	r2, r3
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001658:	b2db      	uxtb	r3, r3
 800165a:	2b05      	cmp	r3, #5
 800165c:	d136      	bne.n	80016cc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f022 0216 	bic.w	r2, r2, #22
 800166c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	695a      	ldr	r2, [r3, #20]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800167c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001682:	2b00      	cmp	r3, #0
 8001684:	d103      	bne.n	800168e <HAL_DMA_IRQHandler+0x1da>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800168a:	2b00      	cmp	r3, #0
 800168c:	d007      	beq.n	800169e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f022 0208 	bic.w	r2, r2, #8
 800169c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016a2:	223f      	movs	r2, #63	@ 0x3f
 80016a4:	409a      	lsls	r2, r3
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2201      	movs	r2, #1
 80016ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2200      	movs	r2, #0
 80016b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d07e      	beq.n	80017c0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	4798      	blx	r3
        }
        return;
 80016ca:	e079      	b.n	80017c0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d01d      	beq.n	8001716 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d10d      	bne.n	8001704 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d031      	beq.n	8001754 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	4798      	blx	r3
 80016f8:	e02c      	b.n	8001754 <HAL_DMA_IRQHandler+0x2a0>
 80016fa:	bf00      	nop
 80016fc:	20000000 	.word	0x20000000
 8001700:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001708:	2b00      	cmp	r3, #0
 800170a:	d023      	beq.n	8001754 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	4798      	blx	r3
 8001714:	e01e      	b.n	8001754 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001720:	2b00      	cmp	r3, #0
 8001722:	d10f      	bne.n	8001744 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f022 0210 	bic.w	r2, r2, #16
 8001732:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2201      	movs	r2, #1
 8001738:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2200      	movs	r2, #0
 8001740:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001748:	2b00      	cmp	r3, #0
 800174a:	d003      	beq.n	8001754 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001758:	2b00      	cmp	r3, #0
 800175a:	d032      	beq.n	80017c2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001760:	f003 0301 	and.w	r3, r3, #1
 8001764:	2b00      	cmp	r3, #0
 8001766:	d022      	beq.n	80017ae <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2205      	movs	r2, #5
 800176c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f022 0201 	bic.w	r2, r2, #1
 800177e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	3301      	adds	r3, #1
 8001784:	60bb      	str	r3, [r7, #8]
 8001786:	697a      	ldr	r2, [r7, #20]
 8001788:	429a      	cmp	r2, r3
 800178a:	d307      	bcc.n	800179c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0301 	and.w	r3, r3, #1
 8001796:	2b00      	cmp	r3, #0
 8001798:	d1f2      	bne.n	8001780 <HAL_DMA_IRQHandler+0x2cc>
 800179a:	e000      	b.n	800179e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800179c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2201      	movs	r2, #1
 80017a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2200      	movs	r2, #0
 80017aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d005      	beq.n	80017c2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	4798      	blx	r3
 80017be:	e000      	b.n	80017c2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80017c0:	bf00      	nop
    }
  }
}
 80017c2:	3718      	adds	r7, #24
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}

080017c8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b085      	sub	sp, #20
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	3b10      	subs	r3, #16
 80017d8:	4a14      	ldr	r2, [pc, #80]	@ (800182c <DMA_CalcBaseAndBitshift+0x64>)
 80017da:	fba2 2303 	umull	r2, r3, r2, r3
 80017de:	091b      	lsrs	r3, r3, #4
 80017e0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80017e2:	4a13      	ldr	r2, [pc, #76]	@ (8001830 <DMA_CalcBaseAndBitshift+0x68>)
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	4413      	add	r3, r2
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	461a      	mov	r2, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	2b03      	cmp	r3, #3
 80017f4:	d909      	bls.n	800180a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80017fe:	f023 0303 	bic.w	r3, r3, #3
 8001802:	1d1a      	adds	r2, r3, #4
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	659a      	str	r2, [r3, #88]	@ 0x58
 8001808:	e007      	b.n	800181a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001812:	f023 0303 	bic.w	r3, r3, #3
 8001816:	687a      	ldr	r2, [r7, #4]
 8001818:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800181e:	4618      	mov	r0, r3
 8001820:	3714      	adds	r7, #20
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	aaaaaaab 	.word	0xaaaaaaab
 8001830:	08004598 	.word	0x08004598

08001834 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001834:	b480      	push	{r7}
 8001836:	b085      	sub	sp, #20
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800183c:	2300      	movs	r3, #0
 800183e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001844:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	699b      	ldr	r3, [r3, #24]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d11f      	bne.n	800188e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	2b03      	cmp	r3, #3
 8001852:	d856      	bhi.n	8001902 <DMA_CheckFifoParam+0xce>
 8001854:	a201      	add	r2, pc, #4	@ (adr r2, 800185c <DMA_CheckFifoParam+0x28>)
 8001856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800185a:	bf00      	nop
 800185c:	0800186d 	.word	0x0800186d
 8001860:	0800187f 	.word	0x0800187f
 8001864:	0800186d 	.word	0x0800186d
 8001868:	08001903 	.word	0x08001903
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001870:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001874:	2b00      	cmp	r3, #0
 8001876:	d046      	beq.n	8001906 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800187c:	e043      	b.n	8001906 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001882:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001886:	d140      	bne.n	800190a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800188c:	e03d      	b.n	800190a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	699b      	ldr	r3, [r3, #24]
 8001892:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001896:	d121      	bne.n	80018dc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	2b03      	cmp	r3, #3
 800189c:	d837      	bhi.n	800190e <DMA_CheckFifoParam+0xda>
 800189e:	a201      	add	r2, pc, #4	@ (adr r2, 80018a4 <DMA_CheckFifoParam+0x70>)
 80018a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018a4:	080018b5 	.word	0x080018b5
 80018a8:	080018bb 	.word	0x080018bb
 80018ac:	080018b5 	.word	0x080018b5
 80018b0:	080018cd 	.word	0x080018cd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	73fb      	strb	r3, [r7, #15]
      break;
 80018b8:	e030      	b.n	800191c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018be:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d025      	beq.n	8001912 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80018ca:	e022      	b.n	8001912 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018d0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80018d4:	d11f      	bne.n	8001916 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80018da:	e01c      	b.n	8001916 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d903      	bls.n	80018ea <DMA_CheckFifoParam+0xb6>
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	2b03      	cmp	r3, #3
 80018e6:	d003      	beq.n	80018f0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80018e8:	e018      	b.n	800191c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	73fb      	strb	r3, [r7, #15]
      break;
 80018ee:	e015      	b.n	800191c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d00e      	beq.n	800191a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	73fb      	strb	r3, [r7, #15]
      break;
 8001900:	e00b      	b.n	800191a <DMA_CheckFifoParam+0xe6>
      break;
 8001902:	bf00      	nop
 8001904:	e00a      	b.n	800191c <DMA_CheckFifoParam+0xe8>
      break;
 8001906:	bf00      	nop
 8001908:	e008      	b.n	800191c <DMA_CheckFifoParam+0xe8>
      break;
 800190a:	bf00      	nop
 800190c:	e006      	b.n	800191c <DMA_CheckFifoParam+0xe8>
      break;
 800190e:	bf00      	nop
 8001910:	e004      	b.n	800191c <DMA_CheckFifoParam+0xe8>
      break;
 8001912:	bf00      	nop
 8001914:	e002      	b.n	800191c <DMA_CheckFifoParam+0xe8>
      break;   
 8001916:	bf00      	nop
 8001918:	e000      	b.n	800191c <DMA_CheckFifoParam+0xe8>
      break;
 800191a:	bf00      	nop
    }
  } 
  
  return status; 
 800191c:	7bfb      	ldrb	r3, [r7, #15]
}
 800191e:	4618      	mov	r0, r3
 8001920:	3714      	adds	r7, #20
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop

0800192c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800192c:	b480      	push	{r7}
 800192e:	b089      	sub	sp, #36	@ 0x24
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001936:	2300      	movs	r3, #0
 8001938:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800193a:	2300      	movs	r3, #0
 800193c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800193e:	2300      	movs	r3, #0
 8001940:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001942:	2300      	movs	r3, #0
 8001944:	61fb      	str	r3, [r7, #28]
 8001946:	e165      	b.n	8001c14 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001948:	2201      	movs	r2, #1
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	fa02 f303 	lsl.w	r3, r2, r3
 8001950:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	697a      	ldr	r2, [r7, #20]
 8001958:	4013      	ands	r3, r2
 800195a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800195c:	693a      	ldr	r2, [r7, #16]
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	429a      	cmp	r2, r3
 8001962:	f040 8154 	bne.w	8001c0e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f003 0303 	and.w	r3, r3, #3
 800196e:	2b01      	cmp	r3, #1
 8001970:	d005      	beq.n	800197e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800197a:	2b02      	cmp	r3, #2
 800197c:	d130      	bne.n	80019e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	005b      	lsls	r3, r3, #1
 8001988:	2203      	movs	r2, #3
 800198a:	fa02 f303 	lsl.w	r3, r2, r3
 800198e:	43db      	mvns	r3, r3
 8001990:	69ba      	ldr	r2, [r7, #24]
 8001992:	4013      	ands	r3, r2
 8001994:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	68da      	ldr	r2, [r3, #12]
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	005b      	lsls	r3, r3, #1
 800199e:	fa02 f303 	lsl.w	r3, r2, r3
 80019a2:	69ba      	ldr	r2, [r7, #24]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	69ba      	ldr	r2, [r7, #24]
 80019ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019b4:	2201      	movs	r2, #1
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	43db      	mvns	r3, r3
 80019be:	69ba      	ldr	r2, [r7, #24]
 80019c0:	4013      	ands	r3, r2
 80019c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	091b      	lsrs	r3, r3, #4
 80019ca:	f003 0201 	and.w	r2, r3, #1
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f003 0303 	and.w	r3, r3, #3
 80019e8:	2b03      	cmp	r3, #3
 80019ea:	d017      	beq.n	8001a1c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	005b      	lsls	r3, r3, #1
 80019f6:	2203      	movs	r2, #3
 80019f8:	fa02 f303 	lsl.w	r3, r2, r3
 80019fc:	43db      	mvns	r3, r3
 80019fe:	69ba      	ldr	r2, [r7, #24]
 8001a00:	4013      	ands	r3, r2
 8001a02:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	689a      	ldr	r2, [r3, #8]
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	005b      	lsls	r3, r3, #1
 8001a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a10:	69ba      	ldr	r2, [r7, #24]
 8001a12:	4313      	orrs	r3, r2
 8001a14:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f003 0303 	and.w	r3, r3, #3
 8001a24:	2b02      	cmp	r3, #2
 8001a26:	d123      	bne.n	8001a70 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	08da      	lsrs	r2, r3, #3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	3208      	adds	r2, #8
 8001a30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a34:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	f003 0307 	and.w	r3, r3, #7
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	220f      	movs	r2, #15
 8001a40:	fa02 f303 	lsl.w	r3, r2, r3
 8001a44:	43db      	mvns	r3, r3
 8001a46:	69ba      	ldr	r2, [r7, #24]
 8001a48:	4013      	ands	r3, r2
 8001a4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	691a      	ldr	r2, [r3, #16]
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	f003 0307 	and.w	r3, r3, #7
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	08da      	lsrs	r2, r3, #3
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	3208      	adds	r2, #8
 8001a6a:	69b9      	ldr	r1, [r7, #24]
 8001a6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	005b      	lsls	r3, r3, #1
 8001a7a:	2203      	movs	r2, #3
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	43db      	mvns	r3, r3
 8001a82:	69ba      	ldr	r2, [r7, #24]
 8001a84:	4013      	ands	r3, r2
 8001a86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f003 0203 	and.w	r2, r3, #3
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	fa02 f303 	lsl.w	r3, r2, r3
 8001a98:	69ba      	ldr	r2, [r7, #24]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	f000 80ae 	beq.w	8001c0e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	60fb      	str	r3, [r7, #12]
 8001ab6:	4b5d      	ldr	r3, [pc, #372]	@ (8001c2c <HAL_GPIO_Init+0x300>)
 8001ab8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aba:	4a5c      	ldr	r2, [pc, #368]	@ (8001c2c <HAL_GPIO_Init+0x300>)
 8001abc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ac0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ac2:	4b5a      	ldr	r3, [pc, #360]	@ (8001c2c <HAL_GPIO_Init+0x300>)
 8001ac4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ac6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001aca:	60fb      	str	r3, [r7, #12]
 8001acc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ace:	4a58      	ldr	r2, [pc, #352]	@ (8001c30 <HAL_GPIO_Init+0x304>)
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	089b      	lsrs	r3, r3, #2
 8001ad4:	3302      	adds	r3, #2
 8001ad6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ada:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	f003 0303 	and.w	r3, r3, #3
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	220f      	movs	r2, #15
 8001ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aea:	43db      	mvns	r3, r3
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	4013      	ands	r3, r2
 8001af0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4a4f      	ldr	r2, [pc, #316]	@ (8001c34 <HAL_GPIO_Init+0x308>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d025      	beq.n	8001b46 <HAL_GPIO_Init+0x21a>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4a4e      	ldr	r2, [pc, #312]	@ (8001c38 <HAL_GPIO_Init+0x30c>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d01f      	beq.n	8001b42 <HAL_GPIO_Init+0x216>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4a4d      	ldr	r2, [pc, #308]	@ (8001c3c <HAL_GPIO_Init+0x310>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d019      	beq.n	8001b3e <HAL_GPIO_Init+0x212>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4a4c      	ldr	r2, [pc, #304]	@ (8001c40 <HAL_GPIO_Init+0x314>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d013      	beq.n	8001b3a <HAL_GPIO_Init+0x20e>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4a4b      	ldr	r2, [pc, #300]	@ (8001c44 <HAL_GPIO_Init+0x318>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d00d      	beq.n	8001b36 <HAL_GPIO_Init+0x20a>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4a4a      	ldr	r2, [pc, #296]	@ (8001c48 <HAL_GPIO_Init+0x31c>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d007      	beq.n	8001b32 <HAL_GPIO_Init+0x206>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4a49      	ldr	r2, [pc, #292]	@ (8001c4c <HAL_GPIO_Init+0x320>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d101      	bne.n	8001b2e <HAL_GPIO_Init+0x202>
 8001b2a:	2306      	movs	r3, #6
 8001b2c:	e00c      	b.n	8001b48 <HAL_GPIO_Init+0x21c>
 8001b2e:	2307      	movs	r3, #7
 8001b30:	e00a      	b.n	8001b48 <HAL_GPIO_Init+0x21c>
 8001b32:	2305      	movs	r3, #5
 8001b34:	e008      	b.n	8001b48 <HAL_GPIO_Init+0x21c>
 8001b36:	2304      	movs	r3, #4
 8001b38:	e006      	b.n	8001b48 <HAL_GPIO_Init+0x21c>
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e004      	b.n	8001b48 <HAL_GPIO_Init+0x21c>
 8001b3e:	2302      	movs	r3, #2
 8001b40:	e002      	b.n	8001b48 <HAL_GPIO_Init+0x21c>
 8001b42:	2301      	movs	r3, #1
 8001b44:	e000      	b.n	8001b48 <HAL_GPIO_Init+0x21c>
 8001b46:	2300      	movs	r3, #0
 8001b48:	69fa      	ldr	r2, [r7, #28]
 8001b4a:	f002 0203 	and.w	r2, r2, #3
 8001b4e:	0092      	lsls	r2, r2, #2
 8001b50:	4093      	lsls	r3, r2
 8001b52:	69ba      	ldr	r2, [r7, #24]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b58:	4935      	ldr	r1, [pc, #212]	@ (8001c30 <HAL_GPIO_Init+0x304>)
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	089b      	lsrs	r3, r3, #2
 8001b5e:	3302      	adds	r3, #2
 8001b60:	69ba      	ldr	r2, [r7, #24]
 8001b62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b66:	4b3a      	ldr	r3, [pc, #232]	@ (8001c50 <HAL_GPIO_Init+0x324>)
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	43db      	mvns	r3, r3
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	4013      	ands	r3, r2
 8001b74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d003      	beq.n	8001b8a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001b82:	69ba      	ldr	r2, [r7, #24]
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	4313      	orrs	r3, r2
 8001b88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b8a:	4a31      	ldr	r2, [pc, #196]	@ (8001c50 <HAL_GPIO_Init+0x324>)
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b90:	4b2f      	ldr	r3, [pc, #188]	@ (8001c50 <HAL_GPIO_Init+0x324>)
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	43db      	mvns	r3, r3
 8001b9a:	69ba      	ldr	r2, [r7, #24]
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d003      	beq.n	8001bb4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001bac:	69ba      	ldr	r2, [r7, #24]
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001bb4:	4a26      	ldr	r2, [pc, #152]	@ (8001c50 <HAL_GPIO_Init+0x324>)
 8001bb6:	69bb      	ldr	r3, [r7, #24]
 8001bb8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001bba:	4b25      	ldr	r3, [pc, #148]	@ (8001c50 <HAL_GPIO_Init+0x324>)
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	43db      	mvns	r3, r3
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d003      	beq.n	8001bde <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001bd6:	69ba      	ldr	r2, [r7, #24]
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bde:	4a1c      	ldr	r2, [pc, #112]	@ (8001c50 <HAL_GPIO_Init+0x324>)
 8001be0:	69bb      	ldr	r3, [r7, #24]
 8001be2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001be4:	4b1a      	ldr	r3, [pc, #104]	@ (8001c50 <HAL_GPIO_Init+0x324>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	43db      	mvns	r3, r3
 8001bee:	69ba      	ldr	r2, [r7, #24]
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d003      	beq.n	8001c08 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001c00:	69ba      	ldr	r2, [r7, #24]
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c08:	4a11      	ldr	r2, [pc, #68]	@ (8001c50 <HAL_GPIO_Init+0x324>)
 8001c0a:	69bb      	ldr	r3, [r7, #24]
 8001c0c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	3301      	adds	r3, #1
 8001c12:	61fb      	str	r3, [r7, #28]
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	2b0f      	cmp	r3, #15
 8001c18:	f67f ae96 	bls.w	8001948 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c1c:	bf00      	nop
 8001c1e:	bf00      	nop
 8001c20:	3724      	adds	r7, #36	@ 0x24
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	40023800 	.word	0x40023800
 8001c30:	40013800 	.word	0x40013800
 8001c34:	40020000 	.word	0x40020000
 8001c38:	40020400 	.word	0x40020400
 8001c3c:	40020800 	.word	0x40020800
 8001c40:	40020c00 	.word	0x40020c00
 8001c44:	40021000 	.word	0x40021000
 8001c48:	40021400 	.word	0x40021400
 8001c4c:	40021800 	.word	0x40021800
 8001c50:	40013c00 	.word	0x40013c00

08001c54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	807b      	strh	r3, [r7, #2]
 8001c60:	4613      	mov	r3, r2
 8001c62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c64:	787b      	ldrb	r3, [r7, #1]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d003      	beq.n	8001c72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c6a:	887a      	ldrh	r2, [r7, #2]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c70:	e003      	b.n	8001c7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c72:	887b      	ldrh	r3, [r7, #2]
 8001c74:	041a      	lsls	r2, r3, #16
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	619a      	str	r2, [r3, #24]
}
 8001c7a:	bf00      	nop
 8001c7c:	370c      	adds	r7, #12
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr

08001c86 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c86:	b480      	push	{r7}
 8001c88:	b085      	sub	sp, #20
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
 8001c8e:	460b      	mov	r3, r1
 8001c90:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	695b      	ldr	r3, [r3, #20]
 8001c96:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c98:	887a      	ldrh	r2, [r7, #2]
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	041a      	lsls	r2, r3, #16
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	43d9      	mvns	r1, r3
 8001ca4:	887b      	ldrh	r3, [r7, #2]
 8001ca6:	400b      	ands	r3, r1
 8001ca8:	431a      	orrs	r2, r3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	619a      	str	r2, [r3, #24]
}
 8001cae:	bf00      	nop
 8001cb0:	3714      	adds	r7, #20
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
	...

08001cbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b084      	sub	sp, #16
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d101      	bne.n	8001cd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e0cc      	b.n	8001e6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cd0:	4b68      	ldr	r3, [pc, #416]	@ (8001e74 <HAL_RCC_ClockConfig+0x1b8>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 030f 	and.w	r3, r3, #15
 8001cd8:	683a      	ldr	r2, [r7, #0]
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d90c      	bls.n	8001cf8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cde:	4b65      	ldr	r3, [pc, #404]	@ (8001e74 <HAL_RCC_ClockConfig+0x1b8>)
 8001ce0:	683a      	ldr	r2, [r7, #0]
 8001ce2:	b2d2      	uxtb	r2, r2
 8001ce4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ce6:	4b63      	ldr	r3, [pc, #396]	@ (8001e74 <HAL_RCC_ClockConfig+0x1b8>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 030f 	and.w	r3, r3, #15
 8001cee:	683a      	ldr	r2, [r7, #0]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d001      	beq.n	8001cf8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e0b8      	b.n	8001e6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 0302 	and.w	r3, r3, #2
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d020      	beq.n	8001d46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 0304 	and.w	r3, r3, #4
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d005      	beq.n	8001d1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d10:	4b59      	ldr	r3, [pc, #356]	@ (8001e78 <HAL_RCC_ClockConfig+0x1bc>)
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	4a58      	ldr	r2, [pc, #352]	@ (8001e78 <HAL_RCC_ClockConfig+0x1bc>)
 8001d16:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001d1a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 0308 	and.w	r3, r3, #8
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d005      	beq.n	8001d34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d28:	4b53      	ldr	r3, [pc, #332]	@ (8001e78 <HAL_RCC_ClockConfig+0x1bc>)
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	4a52      	ldr	r2, [pc, #328]	@ (8001e78 <HAL_RCC_ClockConfig+0x1bc>)
 8001d2e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001d32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d34:	4b50      	ldr	r3, [pc, #320]	@ (8001e78 <HAL_RCC_ClockConfig+0x1bc>)
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	494d      	ldr	r1, [pc, #308]	@ (8001e78 <HAL_RCC_ClockConfig+0x1bc>)
 8001d42:	4313      	orrs	r3, r2
 8001d44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0301 	and.w	r3, r3, #1
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d044      	beq.n	8001ddc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d107      	bne.n	8001d6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d5a:	4b47      	ldr	r3, [pc, #284]	@ (8001e78 <HAL_RCC_ClockConfig+0x1bc>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d119      	bne.n	8001d9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e07f      	b.n	8001e6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d003      	beq.n	8001d7a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d76:	2b03      	cmp	r3, #3
 8001d78:	d107      	bne.n	8001d8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d7a:	4b3f      	ldr	r3, [pc, #252]	@ (8001e78 <HAL_RCC_ClockConfig+0x1bc>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d109      	bne.n	8001d9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e06f      	b.n	8001e6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d8a:	4b3b      	ldr	r3, [pc, #236]	@ (8001e78 <HAL_RCC_ClockConfig+0x1bc>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0302 	and.w	r3, r3, #2
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d101      	bne.n	8001d9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e067      	b.n	8001e6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d9a:	4b37      	ldr	r3, [pc, #220]	@ (8001e78 <HAL_RCC_ClockConfig+0x1bc>)
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	f023 0203 	bic.w	r2, r3, #3
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	4934      	ldr	r1, [pc, #208]	@ (8001e78 <HAL_RCC_ClockConfig+0x1bc>)
 8001da8:	4313      	orrs	r3, r2
 8001daa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001dac:	f7ff f924 	bl	8000ff8 <HAL_GetTick>
 8001db0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001db2:	e00a      	b.n	8001dca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001db4:	f7ff f920 	bl	8000ff8 <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d901      	bls.n	8001dca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e04f      	b.n	8001e6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dca:	4b2b      	ldr	r3, [pc, #172]	@ (8001e78 <HAL_RCC_ClockConfig+0x1bc>)
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	f003 020c 	and.w	r2, r3, #12
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d1eb      	bne.n	8001db4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ddc:	4b25      	ldr	r3, [pc, #148]	@ (8001e74 <HAL_RCC_ClockConfig+0x1b8>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 030f 	and.w	r3, r3, #15
 8001de4:	683a      	ldr	r2, [r7, #0]
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d20c      	bcs.n	8001e04 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dea:	4b22      	ldr	r3, [pc, #136]	@ (8001e74 <HAL_RCC_ClockConfig+0x1b8>)
 8001dec:	683a      	ldr	r2, [r7, #0]
 8001dee:	b2d2      	uxtb	r2, r2
 8001df0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001df2:	4b20      	ldr	r3, [pc, #128]	@ (8001e74 <HAL_RCC_ClockConfig+0x1b8>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 030f 	and.w	r3, r3, #15
 8001dfa:	683a      	ldr	r2, [r7, #0]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d001      	beq.n	8001e04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e032      	b.n	8001e6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 0304 	and.w	r3, r3, #4
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d008      	beq.n	8001e22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e10:	4b19      	ldr	r3, [pc, #100]	@ (8001e78 <HAL_RCC_ClockConfig+0x1bc>)
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	4916      	ldr	r1, [pc, #88]	@ (8001e78 <HAL_RCC_ClockConfig+0x1bc>)
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0308 	and.w	r3, r3, #8
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d009      	beq.n	8001e42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e2e:	4b12      	ldr	r3, [pc, #72]	@ (8001e78 <HAL_RCC_ClockConfig+0x1bc>)
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	691b      	ldr	r3, [r3, #16]
 8001e3a:	00db      	lsls	r3, r3, #3
 8001e3c:	490e      	ldr	r1, [pc, #56]	@ (8001e78 <HAL_RCC_ClockConfig+0x1bc>)
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e42:	f000 f855 	bl	8001ef0 <HAL_RCC_GetSysClockFreq>
 8001e46:	4602      	mov	r2, r0
 8001e48:	4b0b      	ldr	r3, [pc, #44]	@ (8001e78 <HAL_RCC_ClockConfig+0x1bc>)
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	091b      	lsrs	r3, r3, #4
 8001e4e:	f003 030f 	and.w	r3, r3, #15
 8001e52:	490a      	ldr	r1, [pc, #40]	@ (8001e7c <HAL_RCC_ClockConfig+0x1c0>)
 8001e54:	5ccb      	ldrb	r3, [r1, r3]
 8001e56:	fa22 f303 	lsr.w	r3, r2, r3
 8001e5a:	4a09      	ldr	r2, [pc, #36]	@ (8001e80 <HAL_RCC_ClockConfig+0x1c4>)
 8001e5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001e5e:	4b09      	ldr	r3, [pc, #36]	@ (8001e84 <HAL_RCC_ClockConfig+0x1c8>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4618      	mov	r0, r3
 8001e64:	f7ff f884 	bl	8000f70 <HAL_InitTick>

  return HAL_OK;
 8001e68:	2300      	movs	r3, #0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3710      	adds	r7, #16
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	40023c00 	.word	0x40023c00
 8001e78:	40023800 	.word	0x40023800
 8001e7c:	08004580 	.word	0x08004580
 8001e80:	20000000 	.word	0x20000000
 8001e84:	20000004 	.word	0x20000004

08001e88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e8c:	4b03      	ldr	r3, [pc, #12]	@ (8001e9c <HAL_RCC_GetHCLKFreq+0x14>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	20000000 	.word	0x20000000

08001ea0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ea4:	f7ff fff0 	bl	8001e88 <HAL_RCC_GetHCLKFreq>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	4b05      	ldr	r3, [pc, #20]	@ (8001ec0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	0a9b      	lsrs	r3, r3, #10
 8001eb0:	f003 0307 	and.w	r3, r3, #7
 8001eb4:	4903      	ldr	r1, [pc, #12]	@ (8001ec4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001eb6:	5ccb      	ldrb	r3, [r1, r3]
 8001eb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	40023800 	.word	0x40023800
 8001ec4:	08004590 	.word	0x08004590

08001ec8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001ecc:	f7ff ffdc 	bl	8001e88 <HAL_RCC_GetHCLKFreq>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	4b05      	ldr	r3, [pc, #20]	@ (8001ee8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	0b5b      	lsrs	r3, r3, #13
 8001ed8:	f003 0307 	and.w	r3, r3, #7
 8001edc:	4903      	ldr	r1, [pc, #12]	@ (8001eec <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ede:	5ccb      	ldrb	r3, [r1, r3]
 8001ee0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	40023800 	.word	0x40023800
 8001eec:	08004590 	.word	0x08004590

08001ef0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ef0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ef4:	b0a6      	sub	sp, #152	@ 0x98
 8001ef6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8001efe:	2300      	movs	r3, #0
 8001f00:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8001f04:	2300      	movs	r3, #0
 8001f06:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8001f10:	2300      	movs	r3, #0
 8001f12:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f16:	4bc8      	ldr	r3, [pc, #800]	@ (8002238 <HAL_RCC_GetSysClockFreq+0x348>)
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	f003 030c 	and.w	r3, r3, #12
 8001f1e:	2b0c      	cmp	r3, #12
 8001f20:	f200 817e 	bhi.w	8002220 <HAL_RCC_GetSysClockFreq+0x330>
 8001f24:	a201      	add	r2, pc, #4	@ (adr r2, 8001f2c <HAL_RCC_GetSysClockFreq+0x3c>)
 8001f26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f2a:	bf00      	nop
 8001f2c:	08001f61 	.word	0x08001f61
 8001f30:	08002221 	.word	0x08002221
 8001f34:	08002221 	.word	0x08002221
 8001f38:	08002221 	.word	0x08002221
 8001f3c:	08001f69 	.word	0x08001f69
 8001f40:	08002221 	.word	0x08002221
 8001f44:	08002221 	.word	0x08002221
 8001f48:	08002221 	.word	0x08002221
 8001f4c:	08001f71 	.word	0x08001f71
 8001f50:	08002221 	.word	0x08002221
 8001f54:	08002221 	.word	0x08002221
 8001f58:	08002221 	.word	0x08002221
 8001f5c:	080020db 	.word	0x080020db
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f60:	4bb6      	ldr	r3, [pc, #728]	@ (800223c <HAL_RCC_GetSysClockFreq+0x34c>)
 8001f62:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
       break;
 8001f66:	e15f      	b.n	8002228 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f68:	4bb5      	ldr	r3, [pc, #724]	@ (8002240 <HAL_RCC_GetSysClockFreq+0x350>)
 8001f6a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001f6e:	e15b      	b.n	8002228 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f70:	4bb1      	ldr	r3, [pc, #708]	@ (8002238 <HAL_RCC_GetSysClockFreq+0x348>)
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001f78:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f7c:	4bae      	ldr	r3, [pc, #696]	@ (8002238 <HAL_RCC_GetSysClockFreq+0x348>)
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d031      	beq.n	8001fec <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f88:	4bab      	ldr	r3, [pc, #684]	@ (8002238 <HAL_RCC_GetSysClockFreq+0x348>)
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	099b      	lsrs	r3, r3, #6
 8001f8e:	2200      	movs	r2, #0
 8001f90:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001f92:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001f94:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001f96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f9a:	663b      	str	r3, [r7, #96]	@ 0x60
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	667b      	str	r3, [r7, #100]	@ 0x64
 8001fa0:	4ba7      	ldr	r3, [pc, #668]	@ (8002240 <HAL_RCC_GetSysClockFreq+0x350>)
 8001fa2:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001fa6:	462a      	mov	r2, r5
 8001fa8:	fb03 f202 	mul.w	r2, r3, r2
 8001fac:	2300      	movs	r3, #0
 8001fae:	4621      	mov	r1, r4
 8001fb0:	fb01 f303 	mul.w	r3, r1, r3
 8001fb4:	4413      	add	r3, r2
 8001fb6:	4aa2      	ldr	r2, [pc, #648]	@ (8002240 <HAL_RCC_GetSysClockFreq+0x350>)
 8001fb8:	4621      	mov	r1, r4
 8001fba:	fba1 1202 	umull	r1, r2, r1, r2
 8001fbe:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001fc0:	460a      	mov	r2, r1
 8001fc2:	67ba      	str	r2, [r7, #120]	@ 0x78
 8001fc4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8001fc6:	4413      	add	r3, r2
 8001fc8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001fca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001fce:	2200      	movs	r2, #0
 8001fd0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001fd2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001fd4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001fd8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8001fdc:	f7fe f91c 	bl	8000218 <__aeabi_uldivmod>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	460b      	mov	r3, r1
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001fea:	e064      	b.n	80020b6 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fec:	4b92      	ldr	r3, [pc, #584]	@ (8002238 <HAL_RCC_GetSysClockFreq+0x348>)
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	099b      	lsrs	r3, r3, #6
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	653b      	str	r3, [r7, #80]	@ 0x50
 8001ff6:	657a      	str	r2, [r7, #84]	@ 0x54
 8001ff8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001ffa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ffe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002000:	2300      	movs	r3, #0
 8002002:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002004:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8002008:	4622      	mov	r2, r4
 800200a:	462b      	mov	r3, r5
 800200c:	f04f 0000 	mov.w	r0, #0
 8002010:	f04f 0100 	mov.w	r1, #0
 8002014:	0159      	lsls	r1, r3, #5
 8002016:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800201a:	0150      	lsls	r0, r2, #5
 800201c:	4602      	mov	r2, r0
 800201e:	460b      	mov	r3, r1
 8002020:	4621      	mov	r1, r4
 8002022:	1a51      	subs	r1, r2, r1
 8002024:	6139      	str	r1, [r7, #16]
 8002026:	4629      	mov	r1, r5
 8002028:	eb63 0301 	sbc.w	r3, r3, r1
 800202c:	617b      	str	r3, [r7, #20]
 800202e:	f04f 0200 	mov.w	r2, #0
 8002032:	f04f 0300 	mov.w	r3, #0
 8002036:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800203a:	4659      	mov	r1, fp
 800203c:	018b      	lsls	r3, r1, #6
 800203e:	4651      	mov	r1, sl
 8002040:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002044:	4651      	mov	r1, sl
 8002046:	018a      	lsls	r2, r1, #6
 8002048:	4651      	mov	r1, sl
 800204a:	ebb2 0801 	subs.w	r8, r2, r1
 800204e:	4659      	mov	r1, fp
 8002050:	eb63 0901 	sbc.w	r9, r3, r1
 8002054:	f04f 0200 	mov.w	r2, #0
 8002058:	f04f 0300 	mov.w	r3, #0
 800205c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002060:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002064:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002068:	4690      	mov	r8, r2
 800206a:	4699      	mov	r9, r3
 800206c:	4623      	mov	r3, r4
 800206e:	eb18 0303 	adds.w	r3, r8, r3
 8002072:	60bb      	str	r3, [r7, #8]
 8002074:	462b      	mov	r3, r5
 8002076:	eb49 0303 	adc.w	r3, r9, r3
 800207a:	60fb      	str	r3, [r7, #12]
 800207c:	f04f 0200 	mov.w	r2, #0
 8002080:	f04f 0300 	mov.w	r3, #0
 8002084:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002088:	4629      	mov	r1, r5
 800208a:	028b      	lsls	r3, r1, #10
 800208c:	4621      	mov	r1, r4
 800208e:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002092:	4621      	mov	r1, r4
 8002094:	028a      	lsls	r2, r1, #10
 8002096:	4610      	mov	r0, r2
 8002098:	4619      	mov	r1, r3
 800209a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800209e:	2200      	movs	r2, #0
 80020a0:	643b      	str	r3, [r7, #64]	@ 0x40
 80020a2:	647a      	str	r2, [r7, #68]	@ 0x44
 80020a4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80020a8:	f7fe f8b6 	bl	8000218 <__aeabi_uldivmod>
 80020ac:	4602      	mov	r2, r0
 80020ae:	460b      	mov	r3, r1
 80020b0:	4613      	mov	r3, r2
 80020b2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80020b6:	4b60      	ldr	r3, [pc, #384]	@ (8002238 <HAL_RCC_GetSysClockFreq+0x348>)
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	0c1b      	lsrs	r3, r3, #16
 80020bc:	f003 0303 	and.w	r3, r3, #3
 80020c0:	3301      	adds	r3, #1
 80020c2:	005b      	lsls	r3, r3, #1
 80020c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco/pllp;
 80020c8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80020cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80020d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80020d4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80020d8:	e0a6      	b.n	8002228 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020da:	4b57      	ldr	r3, [pc, #348]	@ (8002238 <HAL_RCC_GetSysClockFreq+0x348>)
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80020e2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80020e6:	4b54      	ldr	r3, [pc, #336]	@ (8002238 <HAL_RCC_GetSysClockFreq+0x348>)
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d02a      	beq.n	8002148 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020f2:	4b51      	ldr	r3, [pc, #324]	@ (8002238 <HAL_RCC_GetSysClockFreq+0x348>)
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	099b      	lsrs	r3, r3, #6
 80020f8:	2200      	movs	r2, #0
 80020fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80020fc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80020fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002100:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002104:	2100      	movs	r1, #0
 8002106:	4b4e      	ldr	r3, [pc, #312]	@ (8002240 <HAL_RCC_GetSysClockFreq+0x350>)
 8002108:	fb03 f201 	mul.w	r2, r3, r1
 800210c:	2300      	movs	r3, #0
 800210e:	fb00 f303 	mul.w	r3, r0, r3
 8002112:	4413      	add	r3, r2
 8002114:	4a4a      	ldr	r2, [pc, #296]	@ (8002240 <HAL_RCC_GetSysClockFreq+0x350>)
 8002116:	fba0 1202 	umull	r1, r2, r0, r2
 800211a:	677a      	str	r2, [r7, #116]	@ 0x74
 800211c:	460a      	mov	r2, r1
 800211e:	673a      	str	r2, [r7, #112]	@ 0x70
 8002120:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002122:	4413      	add	r3, r2
 8002124:	677b      	str	r3, [r7, #116]	@ 0x74
 8002126:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800212a:	2200      	movs	r2, #0
 800212c:	633b      	str	r3, [r7, #48]	@ 0x30
 800212e:	637a      	str	r2, [r7, #52]	@ 0x34
 8002130:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002134:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8002138:	f7fe f86e 	bl	8000218 <__aeabi_uldivmod>
 800213c:	4602      	mov	r2, r0
 800213e:	460b      	mov	r3, r1
 8002140:	4613      	mov	r3, r2
 8002142:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002146:	e05b      	b.n	8002200 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002148:	4b3b      	ldr	r3, [pc, #236]	@ (8002238 <HAL_RCC_GetSysClockFreq+0x348>)
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	099b      	lsrs	r3, r3, #6
 800214e:	2200      	movs	r2, #0
 8002150:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002152:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002154:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002156:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800215a:	623b      	str	r3, [r7, #32]
 800215c:	2300      	movs	r3, #0
 800215e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002160:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002164:	4642      	mov	r2, r8
 8002166:	464b      	mov	r3, r9
 8002168:	f04f 0000 	mov.w	r0, #0
 800216c:	f04f 0100 	mov.w	r1, #0
 8002170:	0159      	lsls	r1, r3, #5
 8002172:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002176:	0150      	lsls	r0, r2, #5
 8002178:	4602      	mov	r2, r0
 800217a:	460b      	mov	r3, r1
 800217c:	4641      	mov	r1, r8
 800217e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002182:	4649      	mov	r1, r9
 8002184:	eb63 0b01 	sbc.w	fp, r3, r1
 8002188:	f04f 0200 	mov.w	r2, #0
 800218c:	f04f 0300 	mov.w	r3, #0
 8002190:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002194:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002198:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800219c:	ebb2 040a 	subs.w	r4, r2, sl
 80021a0:	eb63 050b 	sbc.w	r5, r3, fp
 80021a4:	f04f 0200 	mov.w	r2, #0
 80021a8:	f04f 0300 	mov.w	r3, #0
 80021ac:	00eb      	lsls	r3, r5, #3
 80021ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80021b2:	00e2      	lsls	r2, r4, #3
 80021b4:	4614      	mov	r4, r2
 80021b6:	461d      	mov	r5, r3
 80021b8:	4643      	mov	r3, r8
 80021ba:	18e3      	adds	r3, r4, r3
 80021bc:	603b      	str	r3, [r7, #0]
 80021be:	464b      	mov	r3, r9
 80021c0:	eb45 0303 	adc.w	r3, r5, r3
 80021c4:	607b      	str	r3, [r7, #4]
 80021c6:	f04f 0200 	mov.w	r2, #0
 80021ca:	f04f 0300 	mov.w	r3, #0
 80021ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80021d2:	4629      	mov	r1, r5
 80021d4:	028b      	lsls	r3, r1, #10
 80021d6:	4621      	mov	r1, r4
 80021d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80021dc:	4621      	mov	r1, r4
 80021de:	028a      	lsls	r2, r1, #10
 80021e0:	4610      	mov	r0, r2
 80021e2:	4619      	mov	r1, r3
 80021e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80021e8:	2200      	movs	r2, #0
 80021ea:	61bb      	str	r3, [r7, #24]
 80021ec:	61fa      	str	r2, [r7, #28]
 80021ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80021f2:	f7fe f811 	bl	8000218 <__aeabi_uldivmod>
 80021f6:	4602      	mov	r2, r0
 80021f8:	460b      	mov	r3, r1
 80021fa:	4613      	mov	r3, r2
 80021fc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002200:	4b0d      	ldr	r3, [pc, #52]	@ (8002238 <HAL_RCC_GetSysClockFreq+0x348>)
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	0f1b      	lsrs	r3, r3, #28
 8002206:	f003 0307 	and.w	r3, r3, #7
 800220a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco/pllr;
 800220e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002212:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002216:	fbb2 f3f3 	udiv	r3, r2, r3
 800221a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800221e:	e003      	b.n	8002228 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002220:	4b06      	ldr	r3, [pc, #24]	@ (800223c <HAL_RCC_GetSysClockFreq+0x34c>)
 8002222:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002226:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002228:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 800222c:	4618      	mov	r0, r3
 800222e:	3798      	adds	r7, #152	@ 0x98
 8002230:	46bd      	mov	sp, r7
 8002232:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002236:	bf00      	nop
 8002238:	40023800 	.word	0x40023800
 800223c:	00f42400 	.word	0x00f42400
 8002240:	017d7840 	.word	0x017d7840

08002244 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b086      	sub	sp, #24
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d101      	bne.n	8002256 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e28d      	b.n	8002772 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0301 	and.w	r3, r3, #1
 800225e:	2b00      	cmp	r3, #0
 8002260:	f000 8083 	beq.w	800236a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002264:	4b94      	ldr	r3, [pc, #592]	@ (80024b8 <HAL_RCC_OscConfig+0x274>)
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	f003 030c 	and.w	r3, r3, #12
 800226c:	2b04      	cmp	r3, #4
 800226e:	d019      	beq.n	80022a4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002270:	4b91      	ldr	r3, [pc, #580]	@ (80024b8 <HAL_RCC_OscConfig+0x274>)
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002278:	2b08      	cmp	r3, #8
 800227a:	d106      	bne.n	800228a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800227c:	4b8e      	ldr	r3, [pc, #568]	@ (80024b8 <HAL_RCC_OscConfig+0x274>)
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002284:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002288:	d00c      	beq.n	80022a4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800228a:	4b8b      	ldr	r3, [pc, #556]	@ (80024b8 <HAL_RCC_OscConfig+0x274>)
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002292:	2b0c      	cmp	r3, #12
 8002294:	d112      	bne.n	80022bc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002296:	4b88      	ldr	r3, [pc, #544]	@ (80024b8 <HAL_RCC_OscConfig+0x274>)
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800229e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80022a2:	d10b      	bne.n	80022bc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022a4:	4b84      	ldr	r3, [pc, #528]	@ (80024b8 <HAL_RCC_OscConfig+0x274>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d05b      	beq.n	8002368 <HAL_RCC_OscConfig+0x124>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d157      	bne.n	8002368 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e25a      	b.n	8002772 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022c4:	d106      	bne.n	80022d4 <HAL_RCC_OscConfig+0x90>
 80022c6:	4b7c      	ldr	r3, [pc, #496]	@ (80024b8 <HAL_RCC_OscConfig+0x274>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a7b      	ldr	r2, [pc, #492]	@ (80024b8 <HAL_RCC_OscConfig+0x274>)
 80022cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022d0:	6013      	str	r3, [r2, #0]
 80022d2:	e01d      	b.n	8002310 <HAL_RCC_OscConfig+0xcc>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80022dc:	d10c      	bne.n	80022f8 <HAL_RCC_OscConfig+0xb4>
 80022de:	4b76      	ldr	r3, [pc, #472]	@ (80024b8 <HAL_RCC_OscConfig+0x274>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a75      	ldr	r2, [pc, #468]	@ (80024b8 <HAL_RCC_OscConfig+0x274>)
 80022e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022e8:	6013      	str	r3, [r2, #0]
 80022ea:	4b73      	ldr	r3, [pc, #460]	@ (80024b8 <HAL_RCC_OscConfig+0x274>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a72      	ldr	r2, [pc, #456]	@ (80024b8 <HAL_RCC_OscConfig+0x274>)
 80022f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022f4:	6013      	str	r3, [r2, #0]
 80022f6:	e00b      	b.n	8002310 <HAL_RCC_OscConfig+0xcc>
 80022f8:	4b6f      	ldr	r3, [pc, #444]	@ (80024b8 <HAL_RCC_OscConfig+0x274>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a6e      	ldr	r2, [pc, #440]	@ (80024b8 <HAL_RCC_OscConfig+0x274>)
 80022fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002302:	6013      	str	r3, [r2, #0]
 8002304:	4b6c      	ldr	r3, [pc, #432]	@ (80024b8 <HAL_RCC_OscConfig+0x274>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a6b      	ldr	r2, [pc, #428]	@ (80024b8 <HAL_RCC_OscConfig+0x274>)
 800230a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800230e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d013      	beq.n	8002340 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002318:	f7fe fe6e 	bl	8000ff8 <HAL_GetTick>
 800231c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800231e:	e008      	b.n	8002332 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002320:	f7fe fe6a 	bl	8000ff8 <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	2b64      	cmp	r3, #100	@ 0x64
 800232c:	d901      	bls.n	8002332 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e21f      	b.n	8002772 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002332:	4b61      	ldr	r3, [pc, #388]	@ (80024b8 <HAL_RCC_OscConfig+0x274>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d0f0      	beq.n	8002320 <HAL_RCC_OscConfig+0xdc>
 800233e:	e014      	b.n	800236a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002340:	f7fe fe5a 	bl	8000ff8 <HAL_GetTick>
 8002344:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002346:	e008      	b.n	800235a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002348:	f7fe fe56 	bl	8000ff8 <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	2b64      	cmp	r3, #100	@ 0x64
 8002354:	d901      	bls.n	800235a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e20b      	b.n	8002772 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800235a:	4b57      	ldr	r3, [pc, #348]	@ (80024b8 <HAL_RCC_OscConfig+0x274>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d1f0      	bne.n	8002348 <HAL_RCC_OscConfig+0x104>
 8002366:	e000      	b.n	800236a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002368:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0302 	and.w	r3, r3, #2
 8002372:	2b00      	cmp	r3, #0
 8002374:	d06f      	beq.n	8002456 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002376:	4b50      	ldr	r3, [pc, #320]	@ (80024b8 <HAL_RCC_OscConfig+0x274>)
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	f003 030c 	and.w	r3, r3, #12
 800237e:	2b00      	cmp	r3, #0
 8002380:	d017      	beq.n	80023b2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002382:	4b4d      	ldr	r3, [pc, #308]	@ (80024b8 <HAL_RCC_OscConfig+0x274>)
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800238a:	2b08      	cmp	r3, #8
 800238c:	d105      	bne.n	800239a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800238e:	4b4a      	ldr	r3, [pc, #296]	@ (80024b8 <HAL_RCC_OscConfig+0x274>)
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d00b      	beq.n	80023b2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800239a:	4b47      	ldr	r3, [pc, #284]	@ (80024b8 <HAL_RCC_OscConfig+0x274>)
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80023a2:	2b0c      	cmp	r3, #12
 80023a4:	d11c      	bne.n	80023e0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023a6:	4b44      	ldr	r3, [pc, #272]	@ (80024b8 <HAL_RCC_OscConfig+0x274>)
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d116      	bne.n	80023e0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023b2:	4b41      	ldr	r3, [pc, #260]	@ (80024b8 <HAL_RCC_OscConfig+0x274>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0302 	and.w	r3, r3, #2
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d005      	beq.n	80023ca <HAL_RCC_OscConfig+0x186>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d001      	beq.n	80023ca <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e1d3      	b.n	8002772 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023ca:	4b3b      	ldr	r3, [pc, #236]	@ (80024b8 <HAL_RCC_OscConfig+0x274>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	00db      	lsls	r3, r3, #3
 80023d8:	4937      	ldr	r1, [pc, #220]	@ (80024b8 <HAL_RCC_OscConfig+0x274>)
 80023da:	4313      	orrs	r3, r2
 80023dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023de:	e03a      	b.n	8002456 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d020      	beq.n	800242a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023e8:	4b34      	ldr	r3, [pc, #208]	@ (80024bc <HAL_RCC_OscConfig+0x278>)
 80023ea:	2201      	movs	r2, #1
 80023ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ee:	f7fe fe03 	bl	8000ff8 <HAL_GetTick>
 80023f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023f4:	e008      	b.n	8002408 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023f6:	f7fe fdff 	bl	8000ff8 <HAL_GetTick>
 80023fa:	4602      	mov	r2, r0
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	2b02      	cmp	r3, #2
 8002402:	d901      	bls.n	8002408 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002404:	2303      	movs	r3, #3
 8002406:	e1b4      	b.n	8002772 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002408:	4b2b      	ldr	r3, [pc, #172]	@ (80024b8 <HAL_RCC_OscConfig+0x274>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0302 	and.w	r3, r3, #2
 8002410:	2b00      	cmp	r3, #0
 8002412:	d0f0      	beq.n	80023f6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002414:	4b28      	ldr	r3, [pc, #160]	@ (80024b8 <HAL_RCC_OscConfig+0x274>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	691b      	ldr	r3, [r3, #16]
 8002420:	00db      	lsls	r3, r3, #3
 8002422:	4925      	ldr	r1, [pc, #148]	@ (80024b8 <HAL_RCC_OscConfig+0x274>)
 8002424:	4313      	orrs	r3, r2
 8002426:	600b      	str	r3, [r1, #0]
 8002428:	e015      	b.n	8002456 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800242a:	4b24      	ldr	r3, [pc, #144]	@ (80024bc <HAL_RCC_OscConfig+0x278>)
 800242c:	2200      	movs	r2, #0
 800242e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002430:	f7fe fde2 	bl	8000ff8 <HAL_GetTick>
 8002434:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002436:	e008      	b.n	800244a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002438:	f7fe fdde 	bl	8000ff8 <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	2b02      	cmp	r3, #2
 8002444:	d901      	bls.n	800244a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e193      	b.n	8002772 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800244a:	4b1b      	ldr	r3, [pc, #108]	@ (80024b8 <HAL_RCC_OscConfig+0x274>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0302 	and.w	r3, r3, #2
 8002452:	2b00      	cmp	r3, #0
 8002454:	d1f0      	bne.n	8002438 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0308 	and.w	r3, r3, #8
 800245e:	2b00      	cmp	r3, #0
 8002460:	d036      	beq.n	80024d0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	695b      	ldr	r3, [r3, #20]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d016      	beq.n	8002498 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800246a:	4b15      	ldr	r3, [pc, #84]	@ (80024c0 <HAL_RCC_OscConfig+0x27c>)
 800246c:	2201      	movs	r2, #1
 800246e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002470:	f7fe fdc2 	bl	8000ff8 <HAL_GetTick>
 8002474:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002476:	e008      	b.n	800248a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002478:	f7fe fdbe 	bl	8000ff8 <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	2b02      	cmp	r3, #2
 8002484:	d901      	bls.n	800248a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e173      	b.n	8002772 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800248a:	4b0b      	ldr	r3, [pc, #44]	@ (80024b8 <HAL_RCC_OscConfig+0x274>)
 800248c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800248e:	f003 0302 	and.w	r3, r3, #2
 8002492:	2b00      	cmp	r3, #0
 8002494:	d0f0      	beq.n	8002478 <HAL_RCC_OscConfig+0x234>
 8002496:	e01b      	b.n	80024d0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002498:	4b09      	ldr	r3, [pc, #36]	@ (80024c0 <HAL_RCC_OscConfig+0x27c>)
 800249a:	2200      	movs	r2, #0
 800249c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800249e:	f7fe fdab 	bl	8000ff8 <HAL_GetTick>
 80024a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024a4:	e00e      	b.n	80024c4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024a6:	f7fe fda7 	bl	8000ff8 <HAL_GetTick>
 80024aa:	4602      	mov	r2, r0
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d907      	bls.n	80024c4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80024b4:	2303      	movs	r3, #3
 80024b6:	e15c      	b.n	8002772 <HAL_RCC_OscConfig+0x52e>
 80024b8:	40023800 	.word	0x40023800
 80024bc:	42470000 	.word	0x42470000
 80024c0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024c4:	4b8a      	ldr	r3, [pc, #552]	@ (80026f0 <HAL_RCC_OscConfig+0x4ac>)
 80024c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024c8:	f003 0302 	and.w	r3, r3, #2
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d1ea      	bne.n	80024a6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0304 	and.w	r3, r3, #4
 80024d8:	2b00      	cmp	r3, #0
 80024da:	f000 8097 	beq.w	800260c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024de:	2300      	movs	r3, #0
 80024e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024e2:	4b83      	ldr	r3, [pc, #524]	@ (80026f0 <HAL_RCC_OscConfig+0x4ac>)
 80024e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d10f      	bne.n	800250e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024ee:	2300      	movs	r3, #0
 80024f0:	60bb      	str	r3, [r7, #8]
 80024f2:	4b7f      	ldr	r3, [pc, #508]	@ (80026f0 <HAL_RCC_OscConfig+0x4ac>)
 80024f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024f6:	4a7e      	ldr	r2, [pc, #504]	@ (80026f0 <HAL_RCC_OscConfig+0x4ac>)
 80024f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80024fe:	4b7c      	ldr	r3, [pc, #496]	@ (80026f0 <HAL_RCC_OscConfig+0x4ac>)
 8002500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002502:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002506:	60bb      	str	r3, [r7, #8]
 8002508:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800250a:	2301      	movs	r3, #1
 800250c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800250e:	4b79      	ldr	r3, [pc, #484]	@ (80026f4 <HAL_RCC_OscConfig+0x4b0>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002516:	2b00      	cmp	r3, #0
 8002518:	d118      	bne.n	800254c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800251a:	4b76      	ldr	r3, [pc, #472]	@ (80026f4 <HAL_RCC_OscConfig+0x4b0>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a75      	ldr	r2, [pc, #468]	@ (80026f4 <HAL_RCC_OscConfig+0x4b0>)
 8002520:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002524:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002526:	f7fe fd67 	bl	8000ff8 <HAL_GetTick>
 800252a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800252c:	e008      	b.n	8002540 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800252e:	f7fe fd63 	bl	8000ff8 <HAL_GetTick>
 8002532:	4602      	mov	r2, r0
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	2b02      	cmp	r3, #2
 800253a:	d901      	bls.n	8002540 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800253c:	2303      	movs	r3, #3
 800253e:	e118      	b.n	8002772 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002540:	4b6c      	ldr	r3, [pc, #432]	@ (80026f4 <HAL_RCC_OscConfig+0x4b0>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002548:	2b00      	cmp	r3, #0
 800254a:	d0f0      	beq.n	800252e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	2b01      	cmp	r3, #1
 8002552:	d106      	bne.n	8002562 <HAL_RCC_OscConfig+0x31e>
 8002554:	4b66      	ldr	r3, [pc, #408]	@ (80026f0 <HAL_RCC_OscConfig+0x4ac>)
 8002556:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002558:	4a65      	ldr	r2, [pc, #404]	@ (80026f0 <HAL_RCC_OscConfig+0x4ac>)
 800255a:	f043 0301 	orr.w	r3, r3, #1
 800255e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002560:	e01c      	b.n	800259c <HAL_RCC_OscConfig+0x358>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	2b05      	cmp	r3, #5
 8002568:	d10c      	bne.n	8002584 <HAL_RCC_OscConfig+0x340>
 800256a:	4b61      	ldr	r3, [pc, #388]	@ (80026f0 <HAL_RCC_OscConfig+0x4ac>)
 800256c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800256e:	4a60      	ldr	r2, [pc, #384]	@ (80026f0 <HAL_RCC_OscConfig+0x4ac>)
 8002570:	f043 0304 	orr.w	r3, r3, #4
 8002574:	6713      	str	r3, [r2, #112]	@ 0x70
 8002576:	4b5e      	ldr	r3, [pc, #376]	@ (80026f0 <HAL_RCC_OscConfig+0x4ac>)
 8002578:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800257a:	4a5d      	ldr	r2, [pc, #372]	@ (80026f0 <HAL_RCC_OscConfig+0x4ac>)
 800257c:	f043 0301 	orr.w	r3, r3, #1
 8002580:	6713      	str	r3, [r2, #112]	@ 0x70
 8002582:	e00b      	b.n	800259c <HAL_RCC_OscConfig+0x358>
 8002584:	4b5a      	ldr	r3, [pc, #360]	@ (80026f0 <HAL_RCC_OscConfig+0x4ac>)
 8002586:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002588:	4a59      	ldr	r2, [pc, #356]	@ (80026f0 <HAL_RCC_OscConfig+0x4ac>)
 800258a:	f023 0301 	bic.w	r3, r3, #1
 800258e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002590:	4b57      	ldr	r3, [pc, #348]	@ (80026f0 <HAL_RCC_OscConfig+0x4ac>)
 8002592:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002594:	4a56      	ldr	r2, [pc, #344]	@ (80026f0 <HAL_RCC_OscConfig+0x4ac>)
 8002596:	f023 0304 	bic.w	r3, r3, #4
 800259a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d015      	beq.n	80025d0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025a4:	f7fe fd28 	bl	8000ff8 <HAL_GetTick>
 80025a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025aa:	e00a      	b.n	80025c2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025ac:	f7fe fd24 	bl	8000ff8 <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d901      	bls.n	80025c2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e0d7      	b.n	8002772 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025c2:	4b4b      	ldr	r3, [pc, #300]	@ (80026f0 <HAL_RCC_OscConfig+0x4ac>)
 80025c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025c6:	f003 0302 	and.w	r3, r3, #2
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d0ee      	beq.n	80025ac <HAL_RCC_OscConfig+0x368>
 80025ce:	e014      	b.n	80025fa <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025d0:	f7fe fd12 	bl	8000ff8 <HAL_GetTick>
 80025d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025d6:	e00a      	b.n	80025ee <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025d8:	f7fe fd0e 	bl	8000ff8 <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d901      	bls.n	80025ee <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e0c1      	b.n	8002772 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025ee:	4b40      	ldr	r3, [pc, #256]	@ (80026f0 <HAL_RCC_OscConfig+0x4ac>)
 80025f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025f2:	f003 0302 	and.w	r3, r3, #2
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d1ee      	bne.n	80025d8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025fa:	7dfb      	ldrb	r3, [r7, #23]
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d105      	bne.n	800260c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002600:	4b3b      	ldr	r3, [pc, #236]	@ (80026f0 <HAL_RCC_OscConfig+0x4ac>)
 8002602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002604:	4a3a      	ldr	r2, [pc, #232]	@ (80026f0 <HAL_RCC_OscConfig+0x4ac>)
 8002606:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800260a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	699b      	ldr	r3, [r3, #24]
 8002610:	2b00      	cmp	r3, #0
 8002612:	f000 80ad 	beq.w	8002770 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002616:	4b36      	ldr	r3, [pc, #216]	@ (80026f0 <HAL_RCC_OscConfig+0x4ac>)
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	f003 030c 	and.w	r3, r3, #12
 800261e:	2b08      	cmp	r3, #8
 8002620:	d060      	beq.n	80026e4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	699b      	ldr	r3, [r3, #24]
 8002626:	2b02      	cmp	r3, #2
 8002628:	d145      	bne.n	80026b6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800262a:	4b33      	ldr	r3, [pc, #204]	@ (80026f8 <HAL_RCC_OscConfig+0x4b4>)
 800262c:	2200      	movs	r2, #0
 800262e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002630:	f7fe fce2 	bl	8000ff8 <HAL_GetTick>
 8002634:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002636:	e008      	b.n	800264a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002638:	f7fe fcde 	bl	8000ff8 <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	2b02      	cmp	r3, #2
 8002644:	d901      	bls.n	800264a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	e093      	b.n	8002772 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800264a:	4b29      	ldr	r3, [pc, #164]	@ (80026f0 <HAL_RCC_OscConfig+0x4ac>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d1f0      	bne.n	8002638 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	69da      	ldr	r2, [r3, #28]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6a1b      	ldr	r3, [r3, #32]
 800265e:	431a      	orrs	r2, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002664:	019b      	lsls	r3, r3, #6
 8002666:	431a      	orrs	r2, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800266c:	085b      	lsrs	r3, r3, #1
 800266e:	3b01      	subs	r3, #1
 8002670:	041b      	lsls	r3, r3, #16
 8002672:	431a      	orrs	r2, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002678:	061b      	lsls	r3, r3, #24
 800267a:	431a      	orrs	r2, r3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002680:	071b      	lsls	r3, r3, #28
 8002682:	491b      	ldr	r1, [pc, #108]	@ (80026f0 <HAL_RCC_OscConfig+0x4ac>)
 8002684:	4313      	orrs	r3, r2
 8002686:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002688:	4b1b      	ldr	r3, [pc, #108]	@ (80026f8 <HAL_RCC_OscConfig+0x4b4>)
 800268a:	2201      	movs	r2, #1
 800268c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800268e:	f7fe fcb3 	bl	8000ff8 <HAL_GetTick>
 8002692:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002694:	e008      	b.n	80026a8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002696:	f7fe fcaf 	bl	8000ff8 <HAL_GetTick>
 800269a:	4602      	mov	r2, r0
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d901      	bls.n	80026a8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	e064      	b.n	8002772 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026a8:	4b11      	ldr	r3, [pc, #68]	@ (80026f0 <HAL_RCC_OscConfig+0x4ac>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d0f0      	beq.n	8002696 <HAL_RCC_OscConfig+0x452>
 80026b4:	e05c      	b.n	8002770 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026b6:	4b10      	ldr	r3, [pc, #64]	@ (80026f8 <HAL_RCC_OscConfig+0x4b4>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026bc:	f7fe fc9c 	bl	8000ff8 <HAL_GetTick>
 80026c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026c2:	e008      	b.n	80026d6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026c4:	f7fe fc98 	bl	8000ff8 <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	d901      	bls.n	80026d6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e04d      	b.n	8002772 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026d6:	4b06      	ldr	r3, [pc, #24]	@ (80026f0 <HAL_RCC_OscConfig+0x4ac>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d1f0      	bne.n	80026c4 <HAL_RCC_OscConfig+0x480>
 80026e2:	e045      	b.n	8002770 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	699b      	ldr	r3, [r3, #24]
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d107      	bne.n	80026fc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e040      	b.n	8002772 <HAL_RCC_OscConfig+0x52e>
 80026f0:	40023800 	.word	0x40023800
 80026f4:	40007000 	.word	0x40007000
 80026f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80026fc:	4b1f      	ldr	r3, [pc, #124]	@ (800277c <HAL_RCC_OscConfig+0x538>)
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	699b      	ldr	r3, [r3, #24]
 8002706:	2b01      	cmp	r3, #1
 8002708:	d030      	beq.n	800276c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002714:	429a      	cmp	r2, r3
 8002716:	d129      	bne.n	800276c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002722:	429a      	cmp	r2, r3
 8002724:	d122      	bne.n	800276c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002726:	68fa      	ldr	r2, [r7, #12]
 8002728:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800272c:	4013      	ands	r3, r2
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002732:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002734:	4293      	cmp	r3, r2
 8002736:	d119      	bne.n	800276c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002742:	085b      	lsrs	r3, r3, #1
 8002744:	3b01      	subs	r3, #1
 8002746:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002748:	429a      	cmp	r2, r3
 800274a:	d10f      	bne.n	800276c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002756:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002758:	429a      	cmp	r2, r3
 800275a:	d107      	bne.n	800276c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002766:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002768:	429a      	cmp	r2, r3
 800276a:	d001      	beq.n	8002770 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e000      	b.n	8002772 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002770:	2300      	movs	r3, #0
}
 8002772:	4618      	mov	r0, r3
 8002774:	3718      	adds	r7, #24
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	40023800 	.word	0x40023800

08002780 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d101      	bne.n	8002792 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e07b      	b.n	800288a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002796:	2b00      	cmp	r3, #0
 8002798:	d108      	bne.n	80027ac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80027a2:	d009      	beq.n	80027b8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2200      	movs	r2, #0
 80027a8:	61da      	str	r2, [r3, #28]
 80027aa:	e005      	b.n	80027b8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2200      	movs	r2, #0
 80027b0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d106      	bne.n	80027d8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2200      	movs	r2, #0
 80027ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f7fe fa12 	bl	8000bfc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2202      	movs	r2, #2
 80027dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80027ee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002800:	431a      	orrs	r2, r3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	68db      	ldr	r3, [r3, #12]
 8002806:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800280a:	431a      	orrs	r2, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	691b      	ldr	r3, [r3, #16]
 8002810:	f003 0302 	and.w	r3, r3, #2
 8002814:	431a      	orrs	r2, r3
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	695b      	ldr	r3, [r3, #20]
 800281a:	f003 0301 	and.w	r3, r3, #1
 800281e:	431a      	orrs	r2, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	699b      	ldr	r3, [r3, #24]
 8002824:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002828:	431a      	orrs	r2, r3
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	69db      	ldr	r3, [r3, #28]
 800282e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002832:	431a      	orrs	r2, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6a1b      	ldr	r3, [r3, #32]
 8002838:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800283c:	ea42 0103 	orr.w	r1, r2, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002844:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	430a      	orrs	r2, r1
 800284e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	699b      	ldr	r3, [r3, #24]
 8002854:	0c1b      	lsrs	r3, r3, #16
 8002856:	f003 0104 	and.w	r1, r3, #4
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800285e:	f003 0210 	and.w	r2, r3, #16
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	430a      	orrs	r2, r1
 8002868:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	69da      	ldr	r2, [r3, #28]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002878:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2200      	movs	r2, #0
 800287e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002888:	2300      	movs	r3, #0
}
 800288a:	4618      	mov	r0, r3
 800288c:	3708      	adds	r7, #8
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
	...

08002894 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b086      	sub	sp, #24
 8002898:	af00      	add	r7, sp, #0
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	60b9      	str	r1, [r7, #8]
 800289e:	4613      	mov	r3, r2
 80028a0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80028a2:	2300      	movs	r3, #0
 80028a4:	75fb      	strb	r3, [r7, #23]


  if (hspi->State != HAL_SPI_STATE_READY)
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d002      	beq.n	80028b8 <HAL_SPI_Receive_IT+0x24>
  {
    errorcode = HAL_BUSY;
 80028b2:	2302      	movs	r3, #2
 80028b4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80028b6:	e07f      	b.n	80029b8 <HAL_SPI_Receive_IT+0x124>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d110      	bne.n	80028e2 <HAL_SPI_Receive_IT+0x4e>
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80028c8:	d10b      	bne.n	80028e2 <HAL_SPI_Receive_IT+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2204      	movs	r2, #4
 80028ce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 80028d2:	88fb      	ldrh	r3, [r7, #6]
 80028d4:	68ba      	ldr	r2, [r7, #8]
 80028d6:	68b9      	ldr	r1, [r7, #8]
 80028d8:	68f8      	ldr	r0, [r7, #12]
 80028da:	f000 f877 	bl	80029cc <HAL_SPI_TransmitReceive_IT>
 80028de:	4603      	mov	r3, r0
 80028e0:	e06b      	b.n	80029ba <HAL_SPI_Receive_IT+0x126>
  }


  if ((pData == NULL) || (Size == 0U))
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d002      	beq.n	80028ee <HAL_SPI_Receive_IT+0x5a>
 80028e8:	88fb      	ldrh	r3, [r7, #6]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d102      	bne.n	80028f4 <HAL_SPI_Receive_IT+0x60>
  {
    errorcode = HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80028f2:	e061      	b.n	80029b8 <HAL_SPI_Receive_IT+0x124>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d101      	bne.n	8002902 <HAL_SPI_Receive_IT+0x6e>
 80028fe:	2302      	movs	r3, #2
 8002900:	e05b      	b.n	80029ba <HAL_SPI_Receive_IT+0x126>
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2201      	movs	r2, #1
 8002906:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2204      	movs	r2, #4
 800290e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2200      	movs	r2, #0
 8002916:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	68ba      	ldr	r2, [r7, #8]
 800291c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	88fa      	ldrh	r2, [r7, #6]
 8002922:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	88fa      	ldrh	r2, [r7, #6]
 8002928:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2200      	movs	r2, #0
 800292e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2200      	movs	r2, #0
 8002934:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2200      	movs	r2, #0
 800293a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxISR       = NULL;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2200      	movs	r2, #0
 8002940:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d003      	beq.n	8002952 <HAL_SPI_Receive_IT+0xbe>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	4a1d      	ldr	r2, [pc, #116]	@ (80029c4 <HAL_SPI_Receive_IT+0x130>)
 800294e:	641a      	str	r2, [r3, #64]	@ 0x40
 8002950:	e002      	b.n	8002958 <HAL_SPI_Receive_IT+0xc4>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	4a1c      	ldr	r2, [pc, #112]	@ (80029c8 <HAL_SPI_Receive_IT+0x134>)
 8002956:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002960:	d10f      	bne.n	8002982 <HAL_SPI_Receive_IT+0xee>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002970:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002980:	601a      	str	r2, [r3, #0]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800298c:	2b40      	cmp	r3, #64	@ 0x40
 800298e:	d007      	beq.n	80029a0 <HAL_SPI_Receive_IT+0x10c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800299e:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2200      	movs	r2, #0
 80029a4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Enable RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	685a      	ldr	r2, [r3, #4]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 80029b6:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 80029b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3718      	adds	r7, #24
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	08002ef5 	.word	0x08002ef5
 80029c8:	08002eab 	.word	0x08002eab

080029cc <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b087      	sub	sp, #28
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	60b9      	str	r1, [r7, #8]
 80029d6:	607a      	str	r2, [r7, #4]
 80029d8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80029da:	2300      	movs	r3, #0
 80029dc:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80029e4:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80029ec:	7dbb      	ldrb	r3, [r7, #22]
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d00d      	beq.n	8002a0e <HAL_SPI_TransmitReceive_IT+0x42>
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80029f8:	d106      	bne.n	8002a08 <HAL_SPI_TransmitReceive_IT+0x3c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d102      	bne.n	8002a08 <HAL_SPI_TransmitReceive_IT+0x3c>
 8002a02:	7dbb      	ldrb	r3, [r7, #22]
 8002a04:	2b04      	cmp	r3, #4
 8002a06:	d002      	beq.n	8002a0e <HAL_SPI_TransmitReceive_IT+0x42>
  {
    errorcode = HAL_BUSY;
 8002a08:	2302      	movs	r3, #2
 8002a0a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002a0c:	e061      	b.n	8002ad2 <HAL_SPI_TransmitReceive_IT+0x106>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d005      	beq.n	8002a20 <HAL_SPI_TransmitReceive_IT+0x54>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d002      	beq.n	8002a20 <HAL_SPI_TransmitReceive_IT+0x54>
 8002a1a:	887b      	ldrh	r3, [r7, #2]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d102      	bne.n	8002a26 <HAL_SPI_TransmitReceive_IT+0x5a>
  {
    errorcode = HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002a24:	e055      	b.n	8002ad2 <HAL_SPI_TransmitReceive_IT+0x106>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d101      	bne.n	8002a34 <HAL_SPI_TransmitReceive_IT+0x68>
 8002a30:	2302      	movs	r3, #2
 8002a32:	e04f      	b.n	8002ad4 <HAL_SPI_TransmitReceive_IT+0x108>
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2201      	movs	r2, #1
 8002a38:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	2b04      	cmp	r3, #4
 8002a46:	d003      	beq.n	8002a50 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2205      	movs	r2, #5
 8002a4c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2200      	movs	r2, #0
 8002a54:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	68ba      	ldr	r2, [r7, #8]
 8002a5a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	887a      	ldrh	r2, [r7, #2]
 8002a60:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	887a      	ldrh	r2, [r7, #2]
 8002a66:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	887a      	ldrh	r2, [r7, #2]
 8002a72:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	887a      	ldrh	r2, [r7, #2]
 8002a78:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d006      	beq.n	8002a90 <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	4a16      	ldr	r2, [pc, #88]	@ (8002ae0 <HAL_SPI_TransmitReceive_IT+0x114>)
 8002a86:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	4a16      	ldr	r2, [pc, #88]	@ (8002ae4 <HAL_SPI_TransmitReceive_IT+0x118>)
 8002a8c:	645a      	str	r2, [r3, #68]	@ 0x44
 8002a8e:	e005      	b.n	8002a9c <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	4a15      	ldr	r2, [pc, #84]	@ (8002ae8 <HAL_SPI_TransmitReceive_IT+0x11c>)
 8002a94:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	4a14      	ldr	r2, [pc, #80]	@ (8002aec <HAL_SPI_TransmitReceive_IT+0x120>)
 8002a9a:	645a      	str	r2, [r3, #68]	@ 0x44
  }
#endif /* USE_SPI_CRC */


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002aa6:	2b40      	cmp	r3, #64	@ 0x40
 8002aa8:	d007      	beq.n	8002aba <HAL_SPI_TransmitReceive_IT+0xee>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002ab8:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2200      	movs	r2, #0
 8002abe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	685a      	ldr	r2, [r3, #4]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f042 02e0 	orr.w	r2, r2, #224	@ 0xe0
 8002ad0:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 8002ad2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	371c      	adds	r7, #28
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr
 8002ae0:	08002ded 	.word	0x08002ded
 8002ae4:	08002e4d 	.word	0x08002e4d
 8002ae8:	08002d29 	.word	0x08002d29
 8002aec:	08002d8d 	.word	0x08002d8d

08002af0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b088      	sub	sp, #32
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002b08:	69bb      	ldr	r3, [r7, #24]
 8002b0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d10e      	bne.n	8002b30 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002b12:	69bb      	ldr	r3, [r7, #24]
 8002b14:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d009      	beq.n	8002b30 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d004      	beq.n	8002b30 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	4798      	blx	r3
    return;
 8002b2e:	e0ce      	b.n	8002cce <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002b30:	69bb      	ldr	r3, [r7, #24]
 8002b32:	f003 0302 	and.w	r3, r3, #2
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d009      	beq.n	8002b4e <HAL_SPI_IRQHandler+0x5e>
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d004      	beq.n	8002b4e <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	4798      	blx	r3
    return;
 8002b4c:	e0bf      	b.n	8002cce <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002b4e:	69bb      	ldr	r3, [r7, #24]
 8002b50:	f003 0320 	and.w	r3, r3, #32
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d10a      	bne.n	8002b6e <HAL_SPI_IRQHandler+0x7e>
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d105      	bne.n	8002b6e <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002b62:	69bb      	ldr	r3, [r7, #24]
 8002b64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	f000 80b0 	beq.w	8002cce <HAL_SPI_IRQHandler+0x1de>
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	f003 0320 	and.w	r3, r3, #32
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	f000 80aa 	beq.w	8002cce <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002b7a:	69bb      	ldr	r3, [r7, #24]
 8002b7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d023      	beq.n	8002bcc <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	2b03      	cmp	r3, #3
 8002b8e:	d011      	beq.n	8002bb4 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b94:	f043 0204 	orr.w	r2, r3, #4
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	617b      	str	r3, [r7, #20]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	617b      	str	r3, [r7, #20]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	617b      	str	r3, [r7, #20]
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	e00b      	b.n	8002bcc <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	613b      	str	r3, [r7, #16]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	613b      	str	r3, [r7, #16]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	613b      	str	r3, [r7, #16]
 8002bc8:	693b      	ldr	r3, [r7, #16]
        return;
 8002bca:	e080      	b.n	8002cce <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002bcc:	69bb      	ldr	r3, [r7, #24]
 8002bce:	f003 0320 	and.w	r3, r3, #32
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d014      	beq.n	8002c00 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bda:	f043 0201 	orr.w	r2, r3, #1
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002be2:	2300      	movs	r3, #0
 8002be4:	60fb      	str	r3, [r7, #12]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	60fb      	str	r3, [r7, #12]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002bfc:	601a      	str	r2, [r3, #0]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002c00:	69bb      	ldr	r3, [r7, #24]
 8002c02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d00c      	beq.n	8002c24 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c0e:	f043 0208 	orr.w	r2, r3, #8
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002c16:	2300      	movs	r3, #0
 8002c18:	60bb      	str	r3, [r7, #8]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	60bb      	str	r3, [r7, #8]
 8002c22:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d04f      	beq.n	8002ccc <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	685a      	ldr	r2, [r3, #4]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002c3a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	f003 0302 	and.w	r3, r3, #2
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d104      	bne.n	8002c58 <HAL_SPI_IRQHandler+0x168>
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	f003 0301 	and.w	r3, r3, #1
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d034      	beq.n	8002cc2 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	685a      	ldr	r2, [r3, #4]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f022 0203 	bic.w	r2, r2, #3
 8002c66:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d011      	beq.n	8002c94 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c74:	4a17      	ldr	r2, [pc, #92]	@ (8002cd4 <HAL_SPI_IRQHandler+0x1e4>)
 8002c76:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7fe fbf7 	bl	8001470 <HAL_DMA_Abort_IT>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d005      	beq.n	8002c94 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c8c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d016      	beq.n	8002cca <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ca0:	4a0c      	ldr	r2, [pc, #48]	@ (8002cd4 <HAL_SPI_IRQHandler+0x1e4>)
 8002ca2:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f7fe fbe1 	bl	8001470 <HAL_DMA_Abort_IT>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d00a      	beq.n	8002cca <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cb8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8002cc0:	e003      	b.n	8002cca <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f000 f812 	bl	8002cec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002cc8:	e000      	b.n	8002ccc <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8002cca:	bf00      	nop
    return;
 8002ccc:	bf00      	nop
  }
}
 8002cce:	3720      	adds	r7, #32
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	08002d01 	.word	0x08002d01

08002cd8 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8002ce0:	bf00      	nop
 8002ce2:	370c      	adds	r7, #12
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr

08002cec <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002cf4:	bf00      	nop
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr

08002d00 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b084      	sub	sp, #16
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d0c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2200      	movs	r2, #0
 8002d12:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2200      	movs	r2, #0
 8002d18:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002d1a:	68f8      	ldr	r0, [r7, #12]
 8002d1c:	f7ff ffe6 	bl	8002cec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002d20:	bf00      	nop
 8002d22:	3710      	adds	r7, #16
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b082      	sub	sp, #8
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f103 020c 	add.w	r2, r3, #12
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d3c:	7812      	ldrb	r2, [r2, #0]
 8002d3e:	b2d2      	uxtb	r2, r2
 8002d40:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d46:	1c5a      	adds	r2, r3, #1
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	3b01      	subs	r3, #1
 8002d54:	b29a      	uxth	r2, r3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d10f      	bne.n	8002d84 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	685a      	ldr	r2, [r3, #4]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002d72:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d102      	bne.n	8002d84 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f000 fa1e 	bl	80031c0 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002d84:	bf00      	nop
 8002d86:	3708      	adds	r7, #8
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b082      	sub	sp, #8
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	330c      	adds	r3, #12
 8002d9e:	7812      	ldrb	r2, [r2, #0]
 8002da0:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002da6:	1c5a      	adds	r2, r3, #1
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	3b01      	subs	r3, #1
 8002db4:	b29a      	uxth	r2, r3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d10f      	bne.n	8002de4 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	685a      	ldr	r2, [r3, #4]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002dd2:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d102      	bne.n	8002de4 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f000 f9ee 	bl	80031c0 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002de4:	bf00      	nop
 8002de6:	3708      	adds	r7, #8
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}

08002dec <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	68da      	ldr	r2, [r3, #12]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dfe:	b292      	uxth	r2, r2
 8002e00:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e06:	1c9a      	adds	r2, r3, #2
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	3b01      	subs	r3, #1
 8002e14:	b29a      	uxth	r2, r3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspi->RxXferCount == 0U)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d10f      	bne.n	8002e44 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	685a      	ldr	r2, [r3, #4]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002e32:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d102      	bne.n	8002e44 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f000 f9be 	bl	80031c0 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002e44:	bf00      	nop
 8002e46:	3708      	adds	r7, #8
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b082      	sub	sp, #8
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e58:	881a      	ldrh	r2, [r3, #0]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e64:	1c9a      	adds	r2, r3, #2
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	3b01      	subs	r3, #1
 8002e72:	b29a      	uxth	r2, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d10f      	bne.n	8002ea2 <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	685a      	ldr	r2, [r3, #4]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002e90:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d102      	bne.n	8002ea2 <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	f000 f98f 	bl	80031c0 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002ea2:	bf00      	nop
 8002ea4:	3708      	adds	r7, #8
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}

08002eaa <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002eaa:	b580      	push	{r7, lr}
 8002eac:	b082      	sub	sp, #8
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f103 020c 	add.w	r2, r3, #12
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ebe:	7812      	ldrb	r2, [r2, #0]
 8002ec0:	b2d2      	uxtb	r2, r2
 8002ec2:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ec8:	1c5a      	adds	r2, r3, #1
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	3b01      	subs	r3, #1
 8002ed6:	b29a      	uxth	r2, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	87da      	strh	r2, [r3, #62]	@ 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d102      	bne.n	8002eec <SPI_RxISR_8BIT+0x42>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f000 f9de 	bl	80032a8 <SPI_CloseRx_ISR>
  }
}
 8002eec:	bf00      	nop
 8002eee:	3708      	adds	r7, #8
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}

08002ef4 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b082      	sub	sp, #8
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	68da      	ldr	r2, [r3, #12]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f06:	b292      	uxth	r2, r2
 8002f08:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f0e:	1c9a      	adds	r2, r3, #2
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	b29a      	uxth	r2, r3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	87da      	strh	r2, [r3, #62]	@ 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d102      	bne.n	8002f32 <SPI_RxISR_16BIT+0x3e>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f000 f9bb 	bl	80032a8 <SPI_CloseRx_ISR>
  }
}
 8002f32:	bf00      	nop
 8002f34:	3708      	adds	r7, #8
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
	...

08002f3c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b088      	sub	sp, #32
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	60f8      	str	r0, [r7, #12]
 8002f44:	60b9      	str	r1, [r7, #8]
 8002f46:	603b      	str	r3, [r7, #0]
 8002f48:	4613      	mov	r3, r2
 8002f4a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002f4c:	f7fe f854 	bl	8000ff8 <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f54:	1a9b      	subs	r3, r3, r2
 8002f56:	683a      	ldr	r2, [r7, #0]
 8002f58:	4413      	add	r3, r2
 8002f5a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002f5c:	f7fe f84c 	bl	8000ff8 <HAL_GetTick>
 8002f60:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002f62:	4b39      	ldr	r3, [pc, #228]	@ (8003048 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	015b      	lsls	r3, r3, #5
 8002f68:	0d1b      	lsrs	r3, r3, #20
 8002f6a:	69fa      	ldr	r2, [r7, #28]
 8002f6c:	fb02 f303 	mul.w	r3, r2, r3
 8002f70:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f72:	e054      	b.n	800301e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f7a:	d050      	beq.n	800301e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002f7c:	f7fe f83c 	bl	8000ff8 <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	69bb      	ldr	r3, [r7, #24]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	69fa      	ldr	r2, [r7, #28]
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d902      	bls.n	8002f92 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002f8c:	69fb      	ldr	r3, [r7, #28]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d13d      	bne.n	800300e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	685a      	ldr	r2, [r3, #4]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002fa0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002faa:	d111      	bne.n	8002fd0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002fb4:	d004      	beq.n	8002fc0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fbe:	d107      	bne.n	8002fd0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002fce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fd4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002fd8:	d10f      	bne.n	8002ffa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002fe8:	601a      	str	r2, [r3, #0]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002ff8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2200      	movs	r2, #0
 8003006:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800300a:	2303      	movs	r3, #3
 800300c:	e017      	b.n	800303e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d101      	bne.n	8003018 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003014:	2300      	movs	r3, #0
 8003016:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	3b01      	subs	r3, #1
 800301c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	689a      	ldr	r2, [r3, #8]
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	4013      	ands	r3, r2
 8003028:	68ba      	ldr	r2, [r7, #8]
 800302a:	429a      	cmp	r2, r3
 800302c:	bf0c      	ite	eq
 800302e:	2301      	moveq	r3, #1
 8003030:	2300      	movne	r3, #0
 8003032:	b2db      	uxtb	r3, r3
 8003034:	461a      	mov	r2, r3
 8003036:	79fb      	ldrb	r3, [r7, #7]
 8003038:	429a      	cmp	r2, r3
 800303a:	d19b      	bne.n	8002f74 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800303c:	2300      	movs	r3, #0
}
 800303e:	4618      	mov	r0, r3
 8003040:	3720      	adds	r7, #32
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	20000000 	.word	0x20000000

0800304c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b086      	sub	sp, #24
 8003050:	af02      	add	r7, sp, #8
 8003052:	60f8      	str	r0, [r7, #12]
 8003054:	60b9      	str	r1, [r7, #8]
 8003056:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003060:	d111      	bne.n	8003086 <SPI_EndRxTransaction+0x3a>
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800306a:	d004      	beq.n	8003076 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003074:	d107      	bne.n	8003086 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003084:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800308e:	d12a      	bne.n	80030e6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003098:	d012      	beq.n	80030c0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	9300      	str	r3, [sp, #0]
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	2200      	movs	r2, #0
 80030a2:	2180      	movs	r1, #128	@ 0x80
 80030a4:	68f8      	ldr	r0, [r7, #12]
 80030a6:	f7ff ff49 	bl	8002f3c <SPI_WaitFlagStateUntilTimeout>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d02d      	beq.n	800310c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030b4:	f043 0220 	orr.w	r2, r3, #32
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80030bc:	2303      	movs	r3, #3
 80030be:	e026      	b.n	800310e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	9300      	str	r3, [sp, #0]
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	2200      	movs	r2, #0
 80030c8:	2101      	movs	r1, #1
 80030ca:	68f8      	ldr	r0, [r7, #12]
 80030cc:	f7ff ff36 	bl	8002f3c <SPI_WaitFlagStateUntilTimeout>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d01a      	beq.n	800310c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030da:	f043 0220 	orr.w	r2, r3, #32
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e013      	b.n	800310e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	9300      	str	r3, [sp, #0]
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	2200      	movs	r2, #0
 80030ee:	2101      	movs	r1, #1
 80030f0:	68f8      	ldr	r0, [r7, #12]
 80030f2:	f7ff ff23 	bl	8002f3c <SPI_WaitFlagStateUntilTimeout>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d007      	beq.n	800310c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003100:	f043 0220 	orr.w	r2, r3, #32
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003108:	2303      	movs	r3, #3
 800310a:	e000      	b.n	800310e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800310c:	2300      	movs	r3, #0
}
 800310e:	4618      	mov	r0, r3
 8003110:	3710      	adds	r7, #16
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
	...

08003118 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b088      	sub	sp, #32
 800311c:	af02      	add	r7, sp, #8
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	60b9      	str	r1, [r7, #8]
 8003122:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	9300      	str	r3, [sp, #0]
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	2201      	movs	r2, #1
 800312c:	2102      	movs	r1, #2
 800312e:	68f8      	ldr	r0, [r7, #12]
 8003130:	f7ff ff04 	bl	8002f3c <SPI_WaitFlagStateUntilTimeout>
 8003134:	4603      	mov	r3, r0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d007      	beq.n	800314a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800313e:	f043 0220 	orr.w	r2, r3, #32
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e032      	b.n	80031b0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800314a:	4b1b      	ldr	r3, [pc, #108]	@ (80031b8 <SPI_EndRxTxTransaction+0xa0>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a1b      	ldr	r2, [pc, #108]	@ (80031bc <SPI_EndRxTxTransaction+0xa4>)
 8003150:	fba2 2303 	umull	r2, r3, r2, r3
 8003154:	0d5b      	lsrs	r3, r3, #21
 8003156:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800315a:	fb02 f303 	mul.w	r3, r2, r3
 800315e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003168:	d112      	bne.n	8003190 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	9300      	str	r3, [sp, #0]
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	2200      	movs	r2, #0
 8003172:	2180      	movs	r1, #128	@ 0x80
 8003174:	68f8      	ldr	r0, [r7, #12]
 8003176:	f7ff fee1 	bl	8002f3c <SPI_WaitFlagStateUntilTimeout>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d016      	beq.n	80031ae <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003184:	f043 0220 	orr.w	r2, r3, #32
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800318c:	2303      	movs	r3, #3
 800318e:	e00f      	b.n	80031b0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d00a      	beq.n	80031ac <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	3b01      	subs	r3, #1
 800319a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031a6:	2b80      	cmp	r3, #128	@ 0x80
 80031a8:	d0f2      	beq.n	8003190 <SPI_EndRxTxTransaction+0x78>
 80031aa:	e000      	b.n	80031ae <SPI_EndRxTxTransaction+0x96>
        break;
 80031ac:	bf00      	nop
  }

  return HAL_OK;
 80031ae:	2300      	movs	r3, #0
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3718      	adds	r7, #24
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	20000000 	.word	0x20000000
 80031bc:	165e9f81 	.word	0x165e9f81

080031c0 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b086      	sub	sp, #24
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 80031c8:	4b35      	ldr	r3, [pc, #212]	@ (80032a0 <SPI_CloseRxTx_ISR+0xe0>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a35      	ldr	r2, [pc, #212]	@ (80032a4 <SPI_CloseRxTx_ISR+0xe4>)
 80031ce:	fba2 2303 	umull	r2, r3, r2, r3
 80031d2:	0a5b      	lsrs	r3, r3, #9
 80031d4:	2264      	movs	r2, #100	@ 0x64
 80031d6:	fb02 f303 	mul.w	r3, r2, r3
 80031da:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80031dc:	f7fd ff0c 	bl	8000ff8 <HAL_GetTick>
 80031e0:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	685a      	ldr	r2, [r3, #4]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f022 0220 	bic.w	r2, r2, #32
 80031f0:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d106      	bne.n	8003206 <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031fc:	f043 0220 	orr.w	r2, r3, #32
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003204:	e009      	b.n	800321a <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	3b01      	subs	r3, #1
 800320a:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	f003 0302 	and.w	r3, r3, #2
 8003216:	2b00      	cmp	r3, #0
 8003218:	d0eb      	beq.n	80031f2 <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800321a:	697a      	ldr	r2, [r7, #20]
 800321c:	2164      	movs	r1, #100	@ 0x64
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f7ff ff7a 	bl	8003118 <SPI_EndRxTxTransaction>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d005      	beq.n	8003236 <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800322e:	f043 0220 	orr.w	r2, r3, #32
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d10a      	bne.n	8003254 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800323e:	2300      	movs	r3, #0
 8003240:	60fb      	str	r3, [r7, #12]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	60fb      	str	r3, [r7, #12]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	60fb      	str	r3, [r7, #12]
 8003252:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003258:	2b00      	cmp	r3, #0
 800325a:	d115      	bne.n	8003288 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003262:	b2db      	uxtb	r3, r3
 8003264:	2b04      	cmp	r3, #4
 8003266:	d107      	bne.n	8003278 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f7fd fac7 	bl	8000804 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8003276:	e00e      	b.n	8003296 <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2201      	movs	r2, #1
 800327c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	f7ff fd29 	bl	8002cd8 <HAL_SPI_TxRxCpltCallback>
}
 8003286:	e006      	b.n	8003296 <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2201      	movs	r2, #1
 800328c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      HAL_SPI_ErrorCallback(hspi);
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f7ff fd2b 	bl	8002cec <HAL_SPI_ErrorCallback>
}
 8003296:	bf00      	nop
 8003298:	3718      	adds	r7, #24
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	20000000 	.word	0x20000000
 80032a4:	057619f1 	.word	0x057619f1

080032a8 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b084      	sub	sp, #16
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	685a      	ldr	r2, [r3, #4]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80032be:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 80032c0:	f7fd fe9a 	bl	8000ff8 <HAL_GetTick>
 80032c4:	4603      	mov	r3, r0
 80032c6:	461a      	mov	r2, r3
 80032c8:	2164      	movs	r1, #100	@ 0x64
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f7ff febe 	bl	800304c <SPI_EndRxTransaction>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d005      	beq.n	80032e2 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032da:	f043 0220 	orr.w	r2, r3, #32
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d10a      	bne.n	8003300 <SPI_CloseRx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80032ea:	2300      	movs	r3, #0
 80032ec:	60fb      	str	r3, [r7, #12]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	60fb      	str	r3, [r7, #12]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	60fb      	str	r3, [r7, #12]
 80032fe:	68fb      	ldr	r3, [r7, #12]
  }
  hspi->State = HAL_SPI_STATE_READY;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800330c:	2b00      	cmp	r3, #0
 800330e:	d103      	bne.n	8003318 <SPI_CloseRx_ISR+0x70>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f7fd fa77 	bl	8000804 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8003316:	e002      	b.n	800331e <SPI_CloseRx_ISR+0x76>
      HAL_SPI_ErrorCallback(hspi);
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f7ff fce7 	bl	8002cec <HAL_SPI_ErrorCallback>
}
 800331e:	bf00      	nop
 8003320:	3710      	adds	r7, #16
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}

08003326 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003326:	b580      	push	{r7, lr}
 8003328:	b082      	sub	sp, #8
 800332a:	af00      	add	r7, sp, #0
 800332c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d101      	bne.n	8003338 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e042      	b.n	80033be <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800333e:	b2db      	uxtb	r3, r3
 8003340:	2b00      	cmp	r3, #0
 8003342:	d106      	bne.n	8003352 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f7fd fcd7 	bl	8000d00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2224      	movs	r2, #36	@ 0x24
 8003356:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	68da      	ldr	r2, [r3, #12]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003368:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f000 fe54 	bl	8004018 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	691a      	ldr	r2, [r3, #16]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800337e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	695a      	ldr	r2, [r3, #20]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800338e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	68da      	ldr	r2, [r3, #12]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800339e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2200      	movs	r2, #0
 80033a4:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2220      	movs	r2, #32
 80033aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2220      	movs	r2, #32
 80033b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80033bc:	2300      	movs	r3, #0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3708      	adds	r7, #8
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}

080033c6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033c6:	b580      	push	{r7, lr}
 80033c8:	b08a      	sub	sp, #40	@ 0x28
 80033ca:	af02      	add	r7, sp, #8
 80033cc:	60f8      	str	r0, [r7, #12]
 80033ce:	60b9      	str	r1, [r7, #8]
 80033d0:	603b      	str	r3, [r7, #0]
 80033d2:	4613      	mov	r3, r2
 80033d4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80033d6:	2300      	movs	r3, #0
 80033d8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	2b20      	cmp	r3, #32
 80033e4:	d175      	bne.n	80034d2 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d002      	beq.n	80033f2 <HAL_UART_Transmit+0x2c>
 80033ec:	88fb      	ldrh	r3, [r7, #6]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d101      	bne.n	80033f6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e06e      	b.n	80034d4 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2200      	movs	r2, #0
 80033fa:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2221      	movs	r2, #33	@ 0x21
 8003400:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003404:	f7fd fdf8 	bl	8000ff8 <HAL_GetTick>
 8003408:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	88fa      	ldrh	r2, [r7, #6]
 800340e:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	88fa      	ldrh	r2, [r7, #6]
 8003414:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800341e:	d108      	bne.n	8003432 <HAL_UART_Transmit+0x6c>
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	691b      	ldr	r3, [r3, #16]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d104      	bne.n	8003432 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003428:	2300      	movs	r3, #0
 800342a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	61bb      	str	r3, [r7, #24]
 8003430:	e003      	b.n	800343a <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003436:	2300      	movs	r3, #0
 8003438:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800343a:	e02e      	b.n	800349a <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	9300      	str	r3, [sp, #0]
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	2200      	movs	r2, #0
 8003444:	2180      	movs	r1, #128	@ 0x80
 8003446:	68f8      	ldr	r0, [r7, #12]
 8003448:	f000 fbb6 	bl	8003bb8 <UART_WaitOnFlagUntilTimeout>
 800344c:	4603      	mov	r3, r0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d005      	beq.n	800345e <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2220      	movs	r2, #32
 8003456:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e03a      	b.n	80034d4 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d10b      	bne.n	800347c <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003464:	69bb      	ldr	r3, [r7, #24]
 8003466:	881b      	ldrh	r3, [r3, #0]
 8003468:	461a      	mov	r2, r3
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003472:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	3302      	adds	r3, #2
 8003478:	61bb      	str	r3, [r7, #24]
 800347a:	e007      	b.n	800348c <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	781a      	ldrb	r2, [r3, #0]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	3301      	adds	r3, #1
 800348a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003490:	b29b      	uxth	r3, r3
 8003492:	3b01      	subs	r3, #1
 8003494:	b29a      	uxth	r2, r3
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800349e:	b29b      	uxth	r3, r3
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d1cb      	bne.n	800343c <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	9300      	str	r3, [sp, #0]
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	2200      	movs	r2, #0
 80034ac:	2140      	movs	r1, #64	@ 0x40
 80034ae:	68f8      	ldr	r0, [r7, #12]
 80034b0:	f000 fb82 	bl	8003bb8 <UART_WaitOnFlagUntilTimeout>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d005      	beq.n	80034c6 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2220      	movs	r2, #32
 80034be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e006      	b.n	80034d4 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2220      	movs	r2, #32
 80034ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80034ce:	2300      	movs	r3, #0
 80034d0:	e000      	b.n	80034d4 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80034d2:	2302      	movs	r3, #2
  }
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3720      	adds	r7, #32
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}

080034dc <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b08a      	sub	sp, #40	@ 0x28
 80034e0:	af02      	add	r7, sp, #8
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	60b9      	str	r1, [r7, #8]
 80034e6:	603b      	str	r3, [r7, #0]
 80034e8:	4613      	mov	r3, r2
 80034ea:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80034ec:	2300      	movs	r3, #0
 80034ee:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	2b20      	cmp	r3, #32
 80034fa:	f040 8081 	bne.w	8003600 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d002      	beq.n	800350a <HAL_UART_Receive+0x2e>
 8003504:	88fb      	ldrh	r3, [r7, #6]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d101      	bne.n	800350e <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e079      	b.n	8003602 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2200      	movs	r2, #0
 8003512:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2222      	movs	r2, #34	@ 0x22
 8003518:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2200      	movs	r2, #0
 8003520:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003522:	f7fd fd69 	bl	8000ff8 <HAL_GetTick>
 8003526:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	88fa      	ldrh	r2, [r7, #6]
 800352c:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	88fa      	ldrh	r2, [r7, #6]
 8003532:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800353c:	d108      	bne.n	8003550 <HAL_UART_Receive+0x74>
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	691b      	ldr	r3, [r3, #16]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d104      	bne.n	8003550 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8003546:	2300      	movs	r3, #0
 8003548:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	61bb      	str	r3, [r7, #24]
 800354e:	e003      	b.n	8003558 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003554:	2300      	movs	r3, #0
 8003556:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003558:	e047      	b.n	80035ea <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	9300      	str	r3, [sp, #0]
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	2200      	movs	r2, #0
 8003562:	2120      	movs	r1, #32
 8003564:	68f8      	ldr	r0, [r7, #12]
 8003566:	f000 fb27 	bl	8003bb8 <UART_WaitOnFlagUntilTimeout>
 800356a:	4603      	mov	r3, r0
 800356c:	2b00      	cmp	r3, #0
 800356e:	d005      	beq.n	800357c <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2220      	movs	r2, #32
 8003574:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8003578:	2303      	movs	r3, #3
 800357a:	e042      	b.n	8003602 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d10c      	bne.n	800359c <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	b29b      	uxth	r3, r3
 800358a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800358e:	b29a      	uxth	r2, r3
 8003590:	69bb      	ldr	r3, [r7, #24]
 8003592:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003594:	69bb      	ldr	r3, [r7, #24]
 8003596:	3302      	adds	r3, #2
 8003598:	61bb      	str	r3, [r7, #24]
 800359a:	e01f      	b.n	80035dc <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035a4:	d007      	beq.n	80035b6 <HAL_UART_Receive+0xda>
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d10a      	bne.n	80035c4 <HAL_UART_Receive+0xe8>
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	691b      	ldr	r3, [r3, #16]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d106      	bne.n	80035c4 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	b2da      	uxtb	r2, r3
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	701a      	strb	r2, [r3, #0]
 80035c2:	e008      	b.n	80035d6 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80035d0:	b2da      	uxtb	r2, r3
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	3301      	adds	r3, #1
 80035da:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	3b01      	subs	r3, #1
 80035e4:	b29a      	uxth	r2, r3
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80035ee:	b29b      	uxth	r3, r3
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d1b2      	bne.n	800355a <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2220      	movs	r2, #32
 80035f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 80035fc:	2300      	movs	r3, #0
 80035fe:	e000      	b.n	8003602 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003600:	2302      	movs	r3, #2
  }
}
 8003602:	4618      	mov	r0, r3
 8003604:	3720      	adds	r7, #32
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}

0800360a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800360a:	b580      	push	{r7, lr}
 800360c:	b084      	sub	sp, #16
 800360e:	af00      	add	r7, sp, #0
 8003610:	60f8      	str	r0, [r7, #12]
 8003612:	60b9      	str	r1, [r7, #8]
 8003614:	4613      	mov	r3, r2
 8003616:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800361e:	b2db      	uxtb	r3, r3
 8003620:	2b20      	cmp	r3, #32
 8003622:	d112      	bne.n	800364a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d002      	beq.n	8003630 <HAL_UART_Receive_IT+0x26>
 800362a:	88fb      	ldrh	r3, [r7, #6]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d101      	bne.n	8003634 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e00b      	b.n	800364c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2200      	movs	r2, #0
 8003638:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800363a:	88fb      	ldrh	r3, [r7, #6]
 800363c:	461a      	mov	r2, r3
 800363e:	68b9      	ldr	r1, [r7, #8]
 8003640:	68f8      	ldr	r0, [r7, #12]
 8003642:	f000 fb12 	bl	8003c6a <UART_Start_Receive_IT>
 8003646:	4603      	mov	r3, r0
 8003648:	e000      	b.n	800364c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800364a:	2302      	movs	r3, #2
  }
}
 800364c:	4618      	mov	r0, r3
 800364e:	3710      	adds	r7, #16
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}

08003654 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b0ba      	sub	sp, #232	@ 0xe8
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	695b      	ldr	r3, [r3, #20]
 8003676:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800367a:	2300      	movs	r3, #0
 800367c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003680:	2300      	movs	r3, #0
 8003682:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003686:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800368a:	f003 030f 	and.w	r3, r3, #15
 800368e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003692:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003696:	2b00      	cmp	r3, #0
 8003698:	d10f      	bne.n	80036ba <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800369a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800369e:	f003 0320 	and.w	r3, r3, #32
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d009      	beq.n	80036ba <HAL_UART_IRQHandler+0x66>
 80036a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036aa:	f003 0320 	and.w	r3, r3, #32
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d003      	beq.n	80036ba <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f000 fbf2 	bl	8003e9c <UART_Receive_IT>
      return;
 80036b8:	e25b      	b.n	8003b72 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80036ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80036be:	2b00      	cmp	r3, #0
 80036c0:	f000 80de 	beq.w	8003880 <HAL_UART_IRQHandler+0x22c>
 80036c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80036c8:	f003 0301 	and.w	r3, r3, #1
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d106      	bne.n	80036de <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80036d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036d4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80036d8:	2b00      	cmp	r3, #0
 80036da:	f000 80d1 	beq.w	8003880 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80036de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036e2:	f003 0301 	and.w	r3, r3, #1
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d00b      	beq.n	8003702 <HAL_UART_IRQHandler+0xae>
 80036ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d005      	beq.n	8003702 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036fa:	f043 0201 	orr.w	r2, r3, #1
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003702:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003706:	f003 0304 	and.w	r3, r3, #4
 800370a:	2b00      	cmp	r3, #0
 800370c:	d00b      	beq.n	8003726 <HAL_UART_IRQHandler+0xd2>
 800370e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003712:	f003 0301 	and.w	r3, r3, #1
 8003716:	2b00      	cmp	r3, #0
 8003718:	d005      	beq.n	8003726 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800371e:	f043 0202 	orr.w	r2, r3, #2
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003726:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800372a:	f003 0302 	and.w	r3, r3, #2
 800372e:	2b00      	cmp	r3, #0
 8003730:	d00b      	beq.n	800374a <HAL_UART_IRQHandler+0xf6>
 8003732:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003736:	f003 0301 	and.w	r3, r3, #1
 800373a:	2b00      	cmp	r3, #0
 800373c:	d005      	beq.n	800374a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003742:	f043 0204 	orr.w	r2, r3, #4
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800374a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800374e:	f003 0308 	and.w	r3, r3, #8
 8003752:	2b00      	cmp	r3, #0
 8003754:	d011      	beq.n	800377a <HAL_UART_IRQHandler+0x126>
 8003756:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800375a:	f003 0320 	and.w	r3, r3, #32
 800375e:	2b00      	cmp	r3, #0
 8003760:	d105      	bne.n	800376e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003762:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003766:	f003 0301 	and.w	r3, r3, #1
 800376a:	2b00      	cmp	r3, #0
 800376c:	d005      	beq.n	800377a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003772:	f043 0208 	orr.w	r2, r3, #8
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800377e:	2b00      	cmp	r3, #0
 8003780:	f000 81f2 	beq.w	8003b68 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003784:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003788:	f003 0320 	and.w	r3, r3, #32
 800378c:	2b00      	cmp	r3, #0
 800378e:	d008      	beq.n	80037a2 <HAL_UART_IRQHandler+0x14e>
 8003790:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003794:	f003 0320 	and.w	r3, r3, #32
 8003798:	2b00      	cmp	r3, #0
 800379a:	d002      	beq.n	80037a2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f000 fb7d 	bl	8003e9c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	695b      	ldr	r3, [r3, #20]
 80037a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037ac:	2b40      	cmp	r3, #64	@ 0x40
 80037ae:	bf0c      	ite	eq
 80037b0:	2301      	moveq	r3, #1
 80037b2:	2300      	movne	r3, #0
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037be:	f003 0308 	and.w	r3, r3, #8
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d103      	bne.n	80037ce <HAL_UART_IRQHandler+0x17a>
 80037c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d04f      	beq.n	800386e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f000 fa85 	bl	8003cde <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	695b      	ldr	r3, [r3, #20]
 80037da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037de:	2b40      	cmp	r3, #64	@ 0x40
 80037e0:	d141      	bne.n	8003866 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	3314      	adds	r3, #20
 80037e8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80037f0:	e853 3f00 	ldrex	r3, [r3]
 80037f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80037f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80037fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003800:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	3314      	adds	r3, #20
 800380a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800380e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003812:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003816:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800381a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800381e:	e841 2300 	strex	r3, r2, [r1]
 8003822:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003826:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d1d9      	bne.n	80037e2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003832:	2b00      	cmp	r3, #0
 8003834:	d013      	beq.n	800385e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800383a:	4a7e      	ldr	r2, [pc, #504]	@ (8003a34 <HAL_UART_IRQHandler+0x3e0>)
 800383c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003842:	4618      	mov	r0, r3
 8003844:	f7fd fe14 	bl	8001470 <HAL_DMA_Abort_IT>
 8003848:	4603      	mov	r3, r0
 800384a:	2b00      	cmp	r3, #0
 800384c:	d016      	beq.n	800387c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003852:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003858:	4610      	mov	r0, r2
 800385a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800385c:	e00e      	b.n	800387c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f000 f994 	bl	8003b8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003864:	e00a      	b.n	800387c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f000 f990 	bl	8003b8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800386c:	e006      	b.n	800387c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f000 f98c 	bl	8003b8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800387a:	e175      	b.n	8003b68 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800387c:	bf00      	nop
    return;
 800387e:	e173      	b.n	8003b68 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003884:	2b01      	cmp	r3, #1
 8003886:	f040 814f 	bne.w	8003b28 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800388a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800388e:	f003 0310 	and.w	r3, r3, #16
 8003892:	2b00      	cmp	r3, #0
 8003894:	f000 8148 	beq.w	8003b28 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003898:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800389c:	f003 0310 	and.w	r3, r3, #16
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	f000 8141 	beq.w	8003b28 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80038a6:	2300      	movs	r3, #0
 80038a8:	60bb      	str	r3, [r7, #8]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	60bb      	str	r3, [r7, #8]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	60bb      	str	r3, [r7, #8]
 80038ba:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	695b      	ldr	r3, [r3, #20]
 80038c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038c6:	2b40      	cmp	r3, #64	@ 0x40
 80038c8:	f040 80b6 	bne.w	8003a38 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80038d8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80038dc:	2b00      	cmp	r3, #0
 80038de:	f000 8145 	beq.w	8003b6c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80038e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80038ea:	429a      	cmp	r2, r3
 80038ec:	f080 813e 	bcs.w	8003b6c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80038f6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038fc:	69db      	ldr	r3, [r3, #28]
 80038fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003902:	f000 8088 	beq.w	8003a16 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	330c      	adds	r3, #12
 800390c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003910:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003914:	e853 3f00 	ldrex	r3, [r3]
 8003918:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800391c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003920:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003924:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	330c      	adds	r3, #12
 800392e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003932:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003936:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800393a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800393e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003942:	e841 2300 	strex	r3, r2, [r1]
 8003946:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800394a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800394e:	2b00      	cmp	r3, #0
 8003950:	d1d9      	bne.n	8003906 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	3314      	adds	r3, #20
 8003958:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800395a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800395c:	e853 3f00 	ldrex	r3, [r3]
 8003960:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003962:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003964:	f023 0301 	bic.w	r3, r3, #1
 8003968:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	3314      	adds	r3, #20
 8003972:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003976:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800397a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800397c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800397e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003982:	e841 2300 	strex	r3, r2, [r1]
 8003986:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003988:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800398a:	2b00      	cmp	r3, #0
 800398c:	d1e1      	bne.n	8003952 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	3314      	adds	r3, #20
 8003994:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003996:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003998:	e853 3f00 	ldrex	r3, [r3]
 800399c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800399e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80039a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80039a4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	3314      	adds	r3, #20
 80039ae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80039b2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80039b4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039b6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80039b8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80039ba:	e841 2300 	strex	r3, r2, [r1]
 80039be:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80039c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d1e3      	bne.n	800398e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2220      	movs	r2, #32
 80039ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	330c      	adds	r3, #12
 80039da:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80039de:	e853 3f00 	ldrex	r3, [r3]
 80039e2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80039e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80039e6:	f023 0310 	bic.w	r3, r3, #16
 80039ea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	330c      	adds	r3, #12
 80039f4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80039f8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80039fa:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039fc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80039fe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003a00:	e841 2300 	strex	r3, r2, [r1]
 8003a04:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003a06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d1e3      	bne.n	80039d4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a10:	4618      	mov	r0, r3
 8003a12:	f7fd fcbd 	bl	8001390 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2202      	movs	r2, #2
 8003a1a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	b29b      	uxth	r3, r3
 8003a2a:	4619      	mov	r1, r3
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f000 f8b7 	bl	8003ba0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003a32:	e09b      	b.n	8003b6c <HAL_UART_IRQHandler+0x518>
 8003a34:	08003da5 	.word	0x08003da5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	f000 808e 	beq.w	8003b70 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003a54:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	f000 8089 	beq.w	8003b70 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	330c      	adds	r3, #12
 8003a64:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a68:	e853 3f00 	ldrex	r3, [r3]
 8003a6c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003a6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a70:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a74:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	330c      	adds	r3, #12
 8003a7e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003a82:	647a      	str	r2, [r7, #68]	@ 0x44
 8003a84:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a86:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003a88:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003a8a:	e841 2300 	strex	r3, r2, [r1]
 8003a8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003a90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d1e3      	bne.n	8003a5e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	3314      	adds	r3, #20
 8003a9c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aa0:	e853 3f00 	ldrex	r3, [r3]
 8003aa4:	623b      	str	r3, [r7, #32]
   return(result);
 8003aa6:	6a3b      	ldr	r3, [r7, #32]
 8003aa8:	f023 0301 	bic.w	r3, r3, #1
 8003aac:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	3314      	adds	r3, #20
 8003ab6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003aba:	633a      	str	r2, [r7, #48]	@ 0x30
 8003abc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003abe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003ac0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ac2:	e841 2300 	strex	r3, r2, [r1]
 8003ac6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003ac8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d1e3      	bne.n	8003a96 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2220      	movs	r2, #32
 8003ad2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	330c      	adds	r3, #12
 8003ae2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	e853 3f00 	ldrex	r3, [r3]
 8003aea:	60fb      	str	r3, [r7, #12]
   return(result);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f023 0310 	bic.w	r3, r3, #16
 8003af2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	330c      	adds	r3, #12
 8003afc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003b00:	61fa      	str	r2, [r7, #28]
 8003b02:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b04:	69b9      	ldr	r1, [r7, #24]
 8003b06:	69fa      	ldr	r2, [r7, #28]
 8003b08:	e841 2300 	strex	r3, r2, [r1]
 8003b0c:	617b      	str	r3, [r7, #20]
   return(result);
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d1e3      	bne.n	8003adc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2202      	movs	r2, #2
 8003b18:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003b1a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003b1e:	4619      	mov	r1, r3
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f000 f83d 	bl	8003ba0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003b26:	e023      	b.n	8003b70 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003b28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d009      	beq.n	8003b48 <HAL_UART_IRQHandler+0x4f4>
 8003b34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d003      	beq.n	8003b48 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	f000 f943 	bl	8003dcc <UART_Transmit_IT>
    return;
 8003b46:	e014      	b.n	8003b72 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003b48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d00e      	beq.n	8003b72 <HAL_UART_IRQHandler+0x51e>
 8003b54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d008      	beq.n	8003b72 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f000 f983 	bl	8003e6c <UART_EndTransmit_IT>
    return;
 8003b66:	e004      	b.n	8003b72 <HAL_UART_IRQHandler+0x51e>
    return;
 8003b68:	bf00      	nop
 8003b6a:	e002      	b.n	8003b72 <HAL_UART_IRQHandler+0x51e>
      return;
 8003b6c:	bf00      	nop
 8003b6e:	e000      	b.n	8003b72 <HAL_UART_IRQHandler+0x51e>
      return;
 8003b70:	bf00      	nop
  }
}
 8003b72:	37e8      	adds	r7, #232	@ 0xe8
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}

08003b78 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003b80:	bf00      	nop
 8003b82:	370c      	adds	r7, #12
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr

08003b8c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b083      	sub	sp, #12
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003b94:	bf00      	nop
 8003b96:	370c      	adds	r7, #12
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr

08003ba0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b083      	sub	sp, #12
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
 8003ba8:	460b      	mov	r3, r1
 8003baa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003bac:	bf00      	nop
 8003bae:	370c      	adds	r7, #12
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr

08003bb8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b086      	sub	sp, #24
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	60f8      	str	r0, [r7, #12]
 8003bc0:	60b9      	str	r1, [r7, #8]
 8003bc2:	603b      	str	r3, [r7, #0]
 8003bc4:	4613      	mov	r3, r2
 8003bc6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bc8:	e03b      	b.n	8003c42 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bca:	6a3b      	ldr	r3, [r7, #32]
 8003bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bd0:	d037      	beq.n	8003c42 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bd2:	f7fd fa11 	bl	8000ff8 <HAL_GetTick>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	6a3a      	ldr	r2, [r7, #32]
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d302      	bcc.n	8003be8 <UART_WaitOnFlagUntilTimeout+0x30>
 8003be2:	6a3b      	ldr	r3, [r7, #32]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d101      	bne.n	8003bec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003be8:	2303      	movs	r3, #3
 8003bea:	e03a      	b.n	8003c62 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	68db      	ldr	r3, [r3, #12]
 8003bf2:	f003 0304 	and.w	r3, r3, #4
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d023      	beq.n	8003c42 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	2b80      	cmp	r3, #128	@ 0x80
 8003bfe:	d020      	beq.n	8003c42 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	2b40      	cmp	r3, #64	@ 0x40
 8003c04:	d01d      	beq.n	8003c42 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 0308 	and.w	r3, r3, #8
 8003c10:	2b08      	cmp	r3, #8
 8003c12:	d116      	bne.n	8003c42 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003c14:	2300      	movs	r3, #0
 8003c16:	617b      	str	r3, [r7, #20]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	617b      	str	r3, [r7, #20]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	617b      	str	r3, [r7, #20]
 8003c28:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c2a:	68f8      	ldr	r0, [r7, #12]
 8003c2c:	f000 f857 	bl	8003cde <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2208      	movs	r2, #8
 8003c34:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e00f      	b.n	8003c62 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	68ba      	ldr	r2, [r7, #8]
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	bf0c      	ite	eq
 8003c52:	2301      	moveq	r3, #1
 8003c54:	2300      	movne	r3, #0
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	461a      	mov	r2, r3
 8003c5a:	79fb      	ldrb	r3, [r7, #7]
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d0b4      	beq.n	8003bca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c60:	2300      	movs	r3, #0
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3718      	adds	r7, #24
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}

08003c6a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c6a:	b480      	push	{r7}
 8003c6c:	b085      	sub	sp, #20
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	60f8      	str	r0, [r7, #12]
 8003c72:	60b9      	str	r1, [r7, #8]
 8003c74:	4613      	mov	r3, r2
 8003c76:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	68ba      	ldr	r2, [r7, #8]
 8003c7c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	88fa      	ldrh	r2, [r7, #6]
 8003c82:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	88fa      	ldrh	r2, [r7, #6]
 8003c88:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2222      	movs	r2, #34	@ 0x22
 8003c94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	691b      	ldr	r3, [r3, #16]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d007      	beq.n	8003cb0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	68da      	ldr	r2, [r3, #12]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003cae:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	695a      	ldr	r2, [r3, #20]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f042 0201 	orr.w	r2, r2, #1
 8003cbe:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	68da      	ldr	r2, [r3, #12]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f042 0220 	orr.w	r2, r2, #32
 8003cce:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003cd0:	2300      	movs	r3, #0
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3714      	adds	r7, #20
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr

08003cde <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003cde:	b480      	push	{r7}
 8003ce0:	b095      	sub	sp, #84	@ 0x54
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	330c      	adds	r3, #12
 8003cec:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cf0:	e853 3f00 	ldrex	r3, [r3]
 8003cf4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003cf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cf8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003cfc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	330c      	adds	r3, #12
 8003d04:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003d06:	643a      	str	r2, [r7, #64]	@ 0x40
 8003d08:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d0a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003d0c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003d0e:	e841 2300 	strex	r3, r2, [r1]
 8003d12:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003d14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d1e5      	bne.n	8003ce6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	3314      	adds	r3, #20
 8003d20:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d22:	6a3b      	ldr	r3, [r7, #32]
 8003d24:	e853 3f00 	ldrex	r3, [r3]
 8003d28:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	f023 0301 	bic.w	r3, r3, #1
 8003d30:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	3314      	adds	r3, #20
 8003d38:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003d3a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003d3c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d3e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d40:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d42:	e841 2300 	strex	r3, r2, [r1]
 8003d46:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d1e5      	bne.n	8003d1a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d119      	bne.n	8003d8a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	330c      	adds	r3, #12
 8003d5c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	e853 3f00 	ldrex	r3, [r3]
 8003d64:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	f023 0310 	bic.w	r3, r3, #16
 8003d6c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	330c      	adds	r3, #12
 8003d74:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003d76:	61ba      	str	r2, [r7, #24]
 8003d78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d7a:	6979      	ldr	r1, [r7, #20]
 8003d7c:	69ba      	ldr	r2, [r7, #24]
 8003d7e:	e841 2300 	strex	r3, r2, [r1]
 8003d82:	613b      	str	r3, [r7, #16]
   return(result);
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d1e5      	bne.n	8003d56 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2220      	movs	r2, #32
 8003d8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2200      	movs	r2, #0
 8003d96:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003d98:	bf00      	nop
 8003d9a:	3754      	adds	r7, #84	@ 0x54
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr

08003da4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b084      	sub	sp, #16
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003db0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2200      	movs	r2, #0
 8003db6:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003dbe:	68f8      	ldr	r0, [r7, #12]
 8003dc0:	f7ff fee4 	bl	8003b8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003dc4:	bf00      	nop
 8003dc6:	3710      	adds	r7, #16
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}

08003dcc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b085      	sub	sp, #20
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	2b21      	cmp	r3, #33	@ 0x21
 8003dde:	d13e      	bne.n	8003e5e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003de8:	d114      	bne.n	8003e14 <UART_Transmit_IT+0x48>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	691b      	ldr	r3, [r3, #16]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d110      	bne.n	8003e14 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6a1b      	ldr	r3, [r3, #32]
 8003df6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	881b      	ldrh	r3, [r3, #0]
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e06:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6a1b      	ldr	r3, [r3, #32]
 8003e0c:	1c9a      	adds	r2, r3, #2
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	621a      	str	r2, [r3, #32]
 8003e12:	e008      	b.n	8003e26 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6a1b      	ldr	r3, [r3, #32]
 8003e18:	1c59      	adds	r1, r3, #1
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	6211      	str	r1, [r2, #32]
 8003e1e:	781a      	ldrb	r2, [r3, #0]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	3b01      	subs	r3, #1
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	687a      	ldr	r2, [r7, #4]
 8003e32:	4619      	mov	r1, r3
 8003e34:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d10f      	bne.n	8003e5a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	68da      	ldr	r2, [r3, #12]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003e48:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	68da      	ldr	r2, [r3, #12]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003e58:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	e000      	b.n	8003e60 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003e5e:	2302      	movs	r3, #2
  }
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	3714      	adds	r7, #20
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b082      	sub	sp, #8
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	68da      	ldr	r2, [r3, #12]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e82:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2220      	movs	r2, #32
 8003e88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f7ff fe73 	bl	8003b78 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003e92:	2300      	movs	r3, #0
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3708      	adds	r7, #8
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}

08003e9c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b08c      	sub	sp, #48	@ 0x30
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	2b22      	cmp	r3, #34	@ 0x22
 8003eae:	f040 80ae 	bne.w	800400e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003eba:	d117      	bne.n	8003eec <UART_Receive_IT+0x50>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	691b      	ldr	r3, [r3, #16]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d113      	bne.n	8003eec <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ecc:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003eda:	b29a      	uxth	r2, r3
 8003edc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ede:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ee4:	1c9a      	adds	r2, r3, #2
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	629a      	str	r2, [r3, #40]	@ 0x28
 8003eea:	e026      	b.n	8003f3a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ef0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003efe:	d007      	beq.n	8003f10 <UART_Receive_IT+0x74>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d10a      	bne.n	8003f1e <UART_Receive_IT+0x82>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	691b      	ldr	r3, [r3, #16]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d106      	bne.n	8003f1e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	b2da      	uxtb	r2, r3
 8003f18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f1a:	701a      	strb	r2, [r3, #0]
 8003f1c:	e008      	b.n	8003f30 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f2a:	b2da      	uxtb	r2, r3
 8003f2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f2e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f34:	1c5a      	adds	r2, r3, #1
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	3b01      	subs	r3, #1
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	687a      	ldr	r2, [r7, #4]
 8003f46:	4619      	mov	r1, r3
 8003f48:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d15d      	bne.n	800400a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	68da      	ldr	r2, [r3, #12]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f022 0220 	bic.w	r2, r2, #32
 8003f5c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	68da      	ldr	r2, [r3, #12]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003f6c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	695a      	ldr	r2, [r3, #20]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f022 0201 	bic.w	r2, r2, #1
 8003f7c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2220      	movs	r2, #32
 8003f82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d135      	bne.n	8004000 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2200      	movs	r2, #0
 8003f98:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	330c      	adds	r3, #12
 8003fa0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	e853 3f00 	ldrex	r3, [r3]
 8003fa8:	613b      	str	r3, [r7, #16]
   return(result);
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	f023 0310 	bic.w	r3, r3, #16
 8003fb0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	330c      	adds	r3, #12
 8003fb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fba:	623a      	str	r2, [r7, #32]
 8003fbc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fbe:	69f9      	ldr	r1, [r7, #28]
 8003fc0:	6a3a      	ldr	r2, [r7, #32]
 8003fc2:	e841 2300 	strex	r3, r2, [r1]
 8003fc6:	61bb      	str	r3, [r7, #24]
   return(result);
 8003fc8:	69bb      	ldr	r3, [r7, #24]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d1e5      	bne.n	8003f9a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 0310 	and.w	r3, r3, #16
 8003fd8:	2b10      	cmp	r3, #16
 8003fda:	d10a      	bne.n	8003ff2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003fdc:	2300      	movs	r3, #0
 8003fde:	60fb      	str	r3, [r7, #12]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	60fb      	str	r3, [r7, #12]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	60fb      	str	r3, [r7, #12]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003ff6:	4619      	mov	r1, r3
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f7ff fdd1 	bl	8003ba0 <HAL_UARTEx_RxEventCallback>
 8003ffe:	e002      	b.n	8004006 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f7fc fd09 	bl	8000a18 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004006:	2300      	movs	r3, #0
 8004008:	e002      	b.n	8004010 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800400a:	2300      	movs	r3, #0
 800400c:	e000      	b.n	8004010 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800400e:	2302      	movs	r3, #2
  }
}
 8004010:	4618      	mov	r0, r3
 8004012:	3730      	adds	r7, #48	@ 0x30
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}

08004018 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004018:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800401c:	b0c0      	sub	sp, #256	@ 0x100
 800401e:	af00      	add	r7, sp, #0
 8004020:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	691b      	ldr	r3, [r3, #16]
 800402c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004034:	68d9      	ldr	r1, [r3, #12]
 8004036:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	ea40 0301 	orr.w	r3, r0, r1
 8004040:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004042:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004046:	689a      	ldr	r2, [r3, #8]
 8004048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800404c:	691b      	ldr	r3, [r3, #16]
 800404e:	431a      	orrs	r2, r3
 8004050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004054:	695b      	ldr	r3, [r3, #20]
 8004056:	431a      	orrs	r2, r3
 8004058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800405c:	69db      	ldr	r3, [r3, #28]
 800405e:	4313      	orrs	r3, r2
 8004060:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004070:	f021 010c 	bic.w	r1, r1, #12
 8004074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800407e:	430b      	orrs	r3, r1
 8004080:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004082:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	695b      	ldr	r3, [r3, #20]
 800408a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800408e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004092:	6999      	ldr	r1, [r3, #24]
 8004094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	ea40 0301 	orr.w	r3, r0, r1
 800409e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80040a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	4b8f      	ldr	r3, [pc, #572]	@ (80042e4 <UART_SetConfig+0x2cc>)
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d005      	beq.n	80040b8 <UART_SetConfig+0xa0>
 80040ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	4b8d      	ldr	r3, [pc, #564]	@ (80042e8 <UART_SetConfig+0x2d0>)
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d104      	bne.n	80040c2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80040b8:	f7fd ff06 	bl	8001ec8 <HAL_RCC_GetPCLK2Freq>
 80040bc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80040c0:	e003      	b.n	80040ca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80040c2:	f7fd feed 	bl	8001ea0 <HAL_RCC_GetPCLK1Freq>
 80040c6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040ce:	69db      	ldr	r3, [r3, #28]
 80040d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040d4:	f040 810c 	bne.w	80042f0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80040d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040dc:	2200      	movs	r2, #0
 80040de:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80040e2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80040e6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80040ea:	4622      	mov	r2, r4
 80040ec:	462b      	mov	r3, r5
 80040ee:	1891      	adds	r1, r2, r2
 80040f0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80040f2:	415b      	adcs	r3, r3
 80040f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80040f6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80040fa:	4621      	mov	r1, r4
 80040fc:	eb12 0801 	adds.w	r8, r2, r1
 8004100:	4629      	mov	r1, r5
 8004102:	eb43 0901 	adc.w	r9, r3, r1
 8004106:	f04f 0200 	mov.w	r2, #0
 800410a:	f04f 0300 	mov.w	r3, #0
 800410e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004112:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004116:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800411a:	4690      	mov	r8, r2
 800411c:	4699      	mov	r9, r3
 800411e:	4623      	mov	r3, r4
 8004120:	eb18 0303 	adds.w	r3, r8, r3
 8004124:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004128:	462b      	mov	r3, r5
 800412a:	eb49 0303 	adc.w	r3, r9, r3
 800412e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004132:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800413e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004142:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004146:	460b      	mov	r3, r1
 8004148:	18db      	adds	r3, r3, r3
 800414a:	653b      	str	r3, [r7, #80]	@ 0x50
 800414c:	4613      	mov	r3, r2
 800414e:	eb42 0303 	adc.w	r3, r2, r3
 8004152:	657b      	str	r3, [r7, #84]	@ 0x54
 8004154:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004158:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800415c:	f7fc f85c 	bl	8000218 <__aeabi_uldivmod>
 8004160:	4602      	mov	r2, r0
 8004162:	460b      	mov	r3, r1
 8004164:	4b61      	ldr	r3, [pc, #388]	@ (80042ec <UART_SetConfig+0x2d4>)
 8004166:	fba3 2302 	umull	r2, r3, r3, r2
 800416a:	095b      	lsrs	r3, r3, #5
 800416c:	011c      	lsls	r4, r3, #4
 800416e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004172:	2200      	movs	r2, #0
 8004174:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004178:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800417c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004180:	4642      	mov	r2, r8
 8004182:	464b      	mov	r3, r9
 8004184:	1891      	adds	r1, r2, r2
 8004186:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004188:	415b      	adcs	r3, r3
 800418a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800418c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004190:	4641      	mov	r1, r8
 8004192:	eb12 0a01 	adds.w	sl, r2, r1
 8004196:	4649      	mov	r1, r9
 8004198:	eb43 0b01 	adc.w	fp, r3, r1
 800419c:	f04f 0200 	mov.w	r2, #0
 80041a0:	f04f 0300 	mov.w	r3, #0
 80041a4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80041a8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80041ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041b0:	4692      	mov	sl, r2
 80041b2:	469b      	mov	fp, r3
 80041b4:	4643      	mov	r3, r8
 80041b6:	eb1a 0303 	adds.w	r3, sl, r3
 80041ba:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80041be:	464b      	mov	r3, r9
 80041c0:	eb4b 0303 	adc.w	r3, fp, r3
 80041c4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80041c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	2200      	movs	r2, #0
 80041d0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80041d4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80041d8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80041dc:	460b      	mov	r3, r1
 80041de:	18db      	adds	r3, r3, r3
 80041e0:	643b      	str	r3, [r7, #64]	@ 0x40
 80041e2:	4613      	mov	r3, r2
 80041e4:	eb42 0303 	adc.w	r3, r2, r3
 80041e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80041ea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80041ee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80041f2:	f7fc f811 	bl	8000218 <__aeabi_uldivmod>
 80041f6:	4602      	mov	r2, r0
 80041f8:	460b      	mov	r3, r1
 80041fa:	4611      	mov	r1, r2
 80041fc:	4b3b      	ldr	r3, [pc, #236]	@ (80042ec <UART_SetConfig+0x2d4>)
 80041fe:	fba3 2301 	umull	r2, r3, r3, r1
 8004202:	095b      	lsrs	r3, r3, #5
 8004204:	2264      	movs	r2, #100	@ 0x64
 8004206:	fb02 f303 	mul.w	r3, r2, r3
 800420a:	1acb      	subs	r3, r1, r3
 800420c:	00db      	lsls	r3, r3, #3
 800420e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004212:	4b36      	ldr	r3, [pc, #216]	@ (80042ec <UART_SetConfig+0x2d4>)
 8004214:	fba3 2302 	umull	r2, r3, r3, r2
 8004218:	095b      	lsrs	r3, r3, #5
 800421a:	005b      	lsls	r3, r3, #1
 800421c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004220:	441c      	add	r4, r3
 8004222:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004226:	2200      	movs	r2, #0
 8004228:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800422c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004230:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004234:	4642      	mov	r2, r8
 8004236:	464b      	mov	r3, r9
 8004238:	1891      	adds	r1, r2, r2
 800423a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800423c:	415b      	adcs	r3, r3
 800423e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004240:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004244:	4641      	mov	r1, r8
 8004246:	1851      	adds	r1, r2, r1
 8004248:	6339      	str	r1, [r7, #48]	@ 0x30
 800424a:	4649      	mov	r1, r9
 800424c:	414b      	adcs	r3, r1
 800424e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004250:	f04f 0200 	mov.w	r2, #0
 8004254:	f04f 0300 	mov.w	r3, #0
 8004258:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800425c:	4659      	mov	r1, fp
 800425e:	00cb      	lsls	r3, r1, #3
 8004260:	4651      	mov	r1, sl
 8004262:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004266:	4651      	mov	r1, sl
 8004268:	00ca      	lsls	r2, r1, #3
 800426a:	4610      	mov	r0, r2
 800426c:	4619      	mov	r1, r3
 800426e:	4603      	mov	r3, r0
 8004270:	4642      	mov	r2, r8
 8004272:	189b      	adds	r3, r3, r2
 8004274:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004278:	464b      	mov	r3, r9
 800427a:	460a      	mov	r2, r1
 800427c:	eb42 0303 	adc.w	r3, r2, r3
 8004280:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004290:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004294:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004298:	460b      	mov	r3, r1
 800429a:	18db      	adds	r3, r3, r3
 800429c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800429e:	4613      	mov	r3, r2
 80042a0:	eb42 0303 	adc.w	r3, r2, r3
 80042a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80042a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80042aa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80042ae:	f7fb ffb3 	bl	8000218 <__aeabi_uldivmod>
 80042b2:	4602      	mov	r2, r0
 80042b4:	460b      	mov	r3, r1
 80042b6:	4b0d      	ldr	r3, [pc, #52]	@ (80042ec <UART_SetConfig+0x2d4>)
 80042b8:	fba3 1302 	umull	r1, r3, r3, r2
 80042bc:	095b      	lsrs	r3, r3, #5
 80042be:	2164      	movs	r1, #100	@ 0x64
 80042c0:	fb01 f303 	mul.w	r3, r1, r3
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	00db      	lsls	r3, r3, #3
 80042c8:	3332      	adds	r3, #50	@ 0x32
 80042ca:	4a08      	ldr	r2, [pc, #32]	@ (80042ec <UART_SetConfig+0x2d4>)
 80042cc:	fba2 2303 	umull	r2, r3, r2, r3
 80042d0:	095b      	lsrs	r3, r3, #5
 80042d2:	f003 0207 	and.w	r2, r3, #7
 80042d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4422      	add	r2, r4
 80042de:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80042e0:	e106      	b.n	80044f0 <UART_SetConfig+0x4d8>
 80042e2:	bf00      	nop
 80042e4:	40011000 	.word	0x40011000
 80042e8:	40011400 	.word	0x40011400
 80042ec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80042f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80042f4:	2200      	movs	r2, #0
 80042f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80042fa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80042fe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004302:	4642      	mov	r2, r8
 8004304:	464b      	mov	r3, r9
 8004306:	1891      	adds	r1, r2, r2
 8004308:	6239      	str	r1, [r7, #32]
 800430a:	415b      	adcs	r3, r3
 800430c:	627b      	str	r3, [r7, #36]	@ 0x24
 800430e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004312:	4641      	mov	r1, r8
 8004314:	1854      	adds	r4, r2, r1
 8004316:	4649      	mov	r1, r9
 8004318:	eb43 0501 	adc.w	r5, r3, r1
 800431c:	f04f 0200 	mov.w	r2, #0
 8004320:	f04f 0300 	mov.w	r3, #0
 8004324:	00eb      	lsls	r3, r5, #3
 8004326:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800432a:	00e2      	lsls	r2, r4, #3
 800432c:	4614      	mov	r4, r2
 800432e:	461d      	mov	r5, r3
 8004330:	4643      	mov	r3, r8
 8004332:	18e3      	adds	r3, r4, r3
 8004334:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004338:	464b      	mov	r3, r9
 800433a:	eb45 0303 	adc.w	r3, r5, r3
 800433e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004342:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800434e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004352:	f04f 0200 	mov.w	r2, #0
 8004356:	f04f 0300 	mov.w	r3, #0
 800435a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800435e:	4629      	mov	r1, r5
 8004360:	008b      	lsls	r3, r1, #2
 8004362:	4621      	mov	r1, r4
 8004364:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004368:	4621      	mov	r1, r4
 800436a:	008a      	lsls	r2, r1, #2
 800436c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004370:	f7fb ff52 	bl	8000218 <__aeabi_uldivmod>
 8004374:	4602      	mov	r2, r0
 8004376:	460b      	mov	r3, r1
 8004378:	4b60      	ldr	r3, [pc, #384]	@ (80044fc <UART_SetConfig+0x4e4>)
 800437a:	fba3 2302 	umull	r2, r3, r3, r2
 800437e:	095b      	lsrs	r3, r3, #5
 8004380:	011c      	lsls	r4, r3, #4
 8004382:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004386:	2200      	movs	r2, #0
 8004388:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800438c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004390:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004394:	4642      	mov	r2, r8
 8004396:	464b      	mov	r3, r9
 8004398:	1891      	adds	r1, r2, r2
 800439a:	61b9      	str	r1, [r7, #24]
 800439c:	415b      	adcs	r3, r3
 800439e:	61fb      	str	r3, [r7, #28]
 80043a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043a4:	4641      	mov	r1, r8
 80043a6:	1851      	adds	r1, r2, r1
 80043a8:	6139      	str	r1, [r7, #16]
 80043aa:	4649      	mov	r1, r9
 80043ac:	414b      	adcs	r3, r1
 80043ae:	617b      	str	r3, [r7, #20]
 80043b0:	f04f 0200 	mov.w	r2, #0
 80043b4:	f04f 0300 	mov.w	r3, #0
 80043b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80043bc:	4659      	mov	r1, fp
 80043be:	00cb      	lsls	r3, r1, #3
 80043c0:	4651      	mov	r1, sl
 80043c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043c6:	4651      	mov	r1, sl
 80043c8:	00ca      	lsls	r2, r1, #3
 80043ca:	4610      	mov	r0, r2
 80043cc:	4619      	mov	r1, r3
 80043ce:	4603      	mov	r3, r0
 80043d0:	4642      	mov	r2, r8
 80043d2:	189b      	adds	r3, r3, r2
 80043d4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80043d8:	464b      	mov	r3, r9
 80043da:	460a      	mov	r2, r1
 80043dc:	eb42 0303 	adc.w	r3, r2, r3
 80043e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80043e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	2200      	movs	r2, #0
 80043ec:	67bb      	str	r3, [r7, #120]	@ 0x78
 80043ee:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80043f0:	f04f 0200 	mov.w	r2, #0
 80043f4:	f04f 0300 	mov.w	r3, #0
 80043f8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80043fc:	4649      	mov	r1, r9
 80043fe:	008b      	lsls	r3, r1, #2
 8004400:	4641      	mov	r1, r8
 8004402:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004406:	4641      	mov	r1, r8
 8004408:	008a      	lsls	r2, r1, #2
 800440a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800440e:	f7fb ff03 	bl	8000218 <__aeabi_uldivmod>
 8004412:	4602      	mov	r2, r0
 8004414:	460b      	mov	r3, r1
 8004416:	4611      	mov	r1, r2
 8004418:	4b38      	ldr	r3, [pc, #224]	@ (80044fc <UART_SetConfig+0x4e4>)
 800441a:	fba3 2301 	umull	r2, r3, r3, r1
 800441e:	095b      	lsrs	r3, r3, #5
 8004420:	2264      	movs	r2, #100	@ 0x64
 8004422:	fb02 f303 	mul.w	r3, r2, r3
 8004426:	1acb      	subs	r3, r1, r3
 8004428:	011b      	lsls	r3, r3, #4
 800442a:	3332      	adds	r3, #50	@ 0x32
 800442c:	4a33      	ldr	r2, [pc, #204]	@ (80044fc <UART_SetConfig+0x4e4>)
 800442e:	fba2 2303 	umull	r2, r3, r2, r3
 8004432:	095b      	lsrs	r3, r3, #5
 8004434:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004438:	441c      	add	r4, r3
 800443a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800443e:	2200      	movs	r2, #0
 8004440:	673b      	str	r3, [r7, #112]	@ 0x70
 8004442:	677a      	str	r2, [r7, #116]	@ 0x74
 8004444:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004448:	4642      	mov	r2, r8
 800444a:	464b      	mov	r3, r9
 800444c:	1891      	adds	r1, r2, r2
 800444e:	60b9      	str	r1, [r7, #8]
 8004450:	415b      	adcs	r3, r3
 8004452:	60fb      	str	r3, [r7, #12]
 8004454:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004458:	4641      	mov	r1, r8
 800445a:	1851      	adds	r1, r2, r1
 800445c:	6039      	str	r1, [r7, #0]
 800445e:	4649      	mov	r1, r9
 8004460:	414b      	adcs	r3, r1
 8004462:	607b      	str	r3, [r7, #4]
 8004464:	f04f 0200 	mov.w	r2, #0
 8004468:	f04f 0300 	mov.w	r3, #0
 800446c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004470:	4659      	mov	r1, fp
 8004472:	00cb      	lsls	r3, r1, #3
 8004474:	4651      	mov	r1, sl
 8004476:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800447a:	4651      	mov	r1, sl
 800447c:	00ca      	lsls	r2, r1, #3
 800447e:	4610      	mov	r0, r2
 8004480:	4619      	mov	r1, r3
 8004482:	4603      	mov	r3, r0
 8004484:	4642      	mov	r2, r8
 8004486:	189b      	adds	r3, r3, r2
 8004488:	66bb      	str	r3, [r7, #104]	@ 0x68
 800448a:	464b      	mov	r3, r9
 800448c:	460a      	mov	r2, r1
 800448e:	eb42 0303 	adc.w	r3, r2, r3
 8004492:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	663b      	str	r3, [r7, #96]	@ 0x60
 800449e:	667a      	str	r2, [r7, #100]	@ 0x64
 80044a0:	f04f 0200 	mov.w	r2, #0
 80044a4:	f04f 0300 	mov.w	r3, #0
 80044a8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80044ac:	4649      	mov	r1, r9
 80044ae:	008b      	lsls	r3, r1, #2
 80044b0:	4641      	mov	r1, r8
 80044b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044b6:	4641      	mov	r1, r8
 80044b8:	008a      	lsls	r2, r1, #2
 80044ba:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80044be:	f7fb feab 	bl	8000218 <__aeabi_uldivmod>
 80044c2:	4602      	mov	r2, r0
 80044c4:	460b      	mov	r3, r1
 80044c6:	4b0d      	ldr	r3, [pc, #52]	@ (80044fc <UART_SetConfig+0x4e4>)
 80044c8:	fba3 1302 	umull	r1, r3, r3, r2
 80044cc:	095b      	lsrs	r3, r3, #5
 80044ce:	2164      	movs	r1, #100	@ 0x64
 80044d0:	fb01 f303 	mul.w	r3, r1, r3
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	011b      	lsls	r3, r3, #4
 80044d8:	3332      	adds	r3, #50	@ 0x32
 80044da:	4a08      	ldr	r2, [pc, #32]	@ (80044fc <UART_SetConfig+0x4e4>)
 80044dc:	fba2 2303 	umull	r2, r3, r2, r3
 80044e0:	095b      	lsrs	r3, r3, #5
 80044e2:	f003 020f 	and.w	r2, r3, #15
 80044e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4422      	add	r2, r4
 80044ee:	609a      	str	r2, [r3, #8]
}
 80044f0:	bf00      	nop
 80044f2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80044f6:	46bd      	mov	sp, r7
 80044f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044fc:	51eb851f 	.word	0x51eb851f

08004500 <memset>:
 8004500:	4402      	add	r2, r0
 8004502:	4603      	mov	r3, r0
 8004504:	4293      	cmp	r3, r2
 8004506:	d100      	bne.n	800450a <memset+0xa>
 8004508:	4770      	bx	lr
 800450a:	f803 1b01 	strb.w	r1, [r3], #1
 800450e:	e7f9      	b.n	8004504 <memset+0x4>

08004510 <__libc_init_array>:
 8004510:	b570      	push	{r4, r5, r6, lr}
 8004512:	4d0d      	ldr	r5, [pc, #52]	@ (8004548 <__libc_init_array+0x38>)
 8004514:	4c0d      	ldr	r4, [pc, #52]	@ (800454c <__libc_init_array+0x3c>)
 8004516:	1b64      	subs	r4, r4, r5
 8004518:	10a4      	asrs	r4, r4, #2
 800451a:	2600      	movs	r6, #0
 800451c:	42a6      	cmp	r6, r4
 800451e:	d109      	bne.n	8004534 <__libc_init_array+0x24>
 8004520:	4d0b      	ldr	r5, [pc, #44]	@ (8004550 <__libc_init_array+0x40>)
 8004522:	4c0c      	ldr	r4, [pc, #48]	@ (8004554 <__libc_init_array+0x44>)
 8004524:	f000 f818 	bl	8004558 <_init>
 8004528:	1b64      	subs	r4, r4, r5
 800452a:	10a4      	asrs	r4, r4, #2
 800452c:	2600      	movs	r6, #0
 800452e:	42a6      	cmp	r6, r4
 8004530:	d105      	bne.n	800453e <__libc_init_array+0x2e>
 8004532:	bd70      	pop	{r4, r5, r6, pc}
 8004534:	f855 3b04 	ldr.w	r3, [r5], #4
 8004538:	4798      	blx	r3
 800453a:	3601      	adds	r6, #1
 800453c:	e7ee      	b.n	800451c <__libc_init_array+0xc>
 800453e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004542:	4798      	blx	r3
 8004544:	3601      	adds	r6, #1
 8004546:	e7f2      	b.n	800452e <__libc_init_array+0x1e>
 8004548:	080045a8 	.word	0x080045a8
 800454c:	080045a8 	.word	0x080045a8
 8004550:	080045a8 	.word	0x080045a8
 8004554:	080045ac 	.word	0x080045ac

08004558 <_init>:
 8004558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800455a:	bf00      	nop
 800455c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800455e:	bc08      	pop	{r3}
 8004560:	469e      	mov	lr, r3
 8004562:	4770      	bx	lr

08004564 <_fini>:
 8004564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004566:	bf00      	nop
 8004568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800456a:	bc08      	pop	{r3}
 800456c:	469e      	mov	lr, r3
 800456e:	4770      	bx	lr
